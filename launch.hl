/*
 * File responsible for starting app.
 *
 * This file is evaluated when the user clicks the desktop icon.
 */





/*
 * Checking if this is an upload request.
 */
if:x:/../*/url?value
  =:/hyper-ide/upload

  /*
   * This is an upload request, making sure we let our upload file handle it,
   * and returning early.
   *
   * Wrapping our attempt inside a try/catch, and returning any exception message
   * to client.
   */
  try
    micro.evaluate.file:@IDE/helpers/upload-files.hl
  catch
    p5.web.response.set-status-code:500
    p5.web.echo:x:/@message?value
  return





/*
 * Figuring out skin to use, and other settings.
 */
.defaults
  skin:serious
select-data:x:/*/*/micro.codemirror.settings





/*
 * Checking if Hyper IDE has already been launched, at which point we return early.
 */
if
  fetch:x:/0/0?value
    widget-exists:hyper-ide-main-container
  return





/*
 * Including Micro, active skin, font CSS file, and main CSS file for Hyper IDE.
 */
p5.web.include-css-file
  @MICRO/media/main.css
  @MICRO/media/fonts.css
p5.web.include-css-file:@MICRO/media/skins/{0}.css
  :x:(/@select-data/*/*/skin|/../*/.defaults/*/skin)/$?value
p5.web.include-css-file:@IDE/media/main.css





/*
 * Verifying user is logged in as root, and if not, 
 * forcing the user to login before we proceed.
 */
whoami
if:x:/@whoami/*/role?value
  !=:root

  /*
   * User is not logged in as root.
   */
  p5.core.login
    message:You'll need to login with a root account to access this module

  /*
   * Returning early to abort evaluating the rest of our file.
   */
  return





/*
 * Setting title of our page.
 */
p5.web.page.set-title:Hyper IDE





/*
 * Creating main container.
 */
create-widget:hyper-ide-main-container
  class:container-fullscreen
  style:"padding-top:0;"

  /*
   * Helper Ajax events, necessary to map keyboard shortcuts, among other things.
   */
  .onsave

    /*
     * Saving active editor's content.
     */
    hyper-ide.save-active-editor

  .onclose

    /*
     * Closing active editor.
     */
    hyper-ide.close-active-editor

  .onprevious

    /*
     * Activating "previous editor" in chain of open editors.
     */
    hyper-ide.activate-previous-editor

  .onnext

    /*
     * Activating "next editor" in chain of open editors.
     */
    hyper-ide.activate-next-editor

  events


    /*
     * Pingback event, invoked every n'th minute, to avoid being thrown out of session.
     *
     * This is done to avoid having user thrown out of his session, while editing files,
     * without raising an Ajax request for 20 minutes or more.
     *
     * Basically, it creates an "empty" Ajax request, every 10 minutes, to touch the session,
     * to avoid having automatic destruction of session occur.
     */
    hyper-ide._pingback

      /*
       * Pingbacking server 10 minutes from now.
       */
      micro.lambda.create-timeout
        milliseconds:600000
        onfinish
          hyper-ide._pingback


    /*
     * Returns file paths for all open editors.
     */
    hyper-ide.get-open-editors

      /*
       * Finding all activate buttons for all editors, and returning their filenames.
       */
      p5.web.widgets.find:hyper-ide-editor-tab-buttons
        .activate
      get-widget-property:x:/@p5.web.widgets.find/*/*?value
        .activate

      /*
       * Iterating through all filenames returned above, and making sure we return
       * them to caller.
       */
      for-each:x:/@get-widget-property/*/*?value
        add:x:/../*/return
          src:x:/@_dp?value
      return


    /*
     * Returns ID for active editor, if any.
     */
    hyper-ide.get-active-editor-id

      /*
       * Finding visible editor.
       */
      p5.web.widgets.find:hyper-ide-editor-tab-editors
        .editor

      /*
       * Checking that above event returned something.
       */
      if:x:/@p5.web.widgets.find/*/*?count
        >:int:0

        /*
         * Finding CSS classes for all editors, such that we can determine which
         * editor is enabled.
         */
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          class

        /*
         * Finding textarea widget of visible editor and returning to caller.
         */
        p5.web.widgets.find:x:/@get-widget-property/*/*(!/=~hide)/.?name
          element:textarea
        return:x:/@p5.web.widgets.find/*/*?value


    /*
     * Returns file path for active editor, if any.
     */
    hyper-ide.get-active-editor

      /*
       * Finding visible editor.
       */
      p5.web.widgets.find:hyper-ide-editor-tab-editors
        .editor

      /*
       * Checking that above event returned something.
       */
      if:x:/@p5.web.widgets.find/*/*?count
        >:int:0

        /*
         * Finding CSS classes for all editors, such that we can determine which
         * editor is enabled.
         */
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          class

        /*
         * Returning active editor's filepath to caller.
         */
        get-widget-property:x:/@get-widget-property/*/*(!/=~hide)/.?name
          .editor
        return:x:/@get-widget-property/*/*?value


    /*
     * Sets the active editor.
     *
     * Pass in [_arg] being filename of editor to activate.
     */
    hyper-ide.set-active-editor

      /*
       * Finding all open editors, and making sire the editor caller is trying
       * to activate, actually exists, and is open.
       */
      hyper-ide.get-open-editors
      if:x:@"/@hyper-ide.get-open-editors/*/""{0}"""
        :x:/../*/_arg?value

        /*
         * Editor passed in as [_arg] was found.
         *
         * For simplicity reasons, we simply select tree view item associated
         * with editor, since this will map up everything automatically for us.
         */
        add:x:/./*/micro.widgets.tree.select-items/*/items
          src:x:/../*/_arg?value
        micro.widgets.tree.select-items:hyper-ide-folder-tree-browser
          items

        /*
         * Making sure we scroll our selected tree view item into view.
         */
        p5.web.widgets.find-first-like:hyper-ide-folder-tree-browser
          class:tree-selected

        /*
         * Returning true to caller, indicating that we had success in setting
         * the current editor.
         */
        return:bool:true


    /*
     * Activating previous editor in chain.
     */
    hyper-ide.activate-previous-editor

      /*
       * Finding all "activate buttons".
       */
      p5.web.widgets.find:hyper-ide-editor-tab-buttons
        .activate

      /*
       * Checking if are more than one button, and if there are, making sure we
       * "click" the previous button in our chain.
       */
      if:x:/@p5.web.widgets.find/*/*?count
        >:int:1

        /*
         * Raising the "onclick" event for the activate button that is before the currently active one.
         */
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          class
        p5.web.widgets.ajax-events.raise:x:/@get-widget-property/*/*(/=~toggled)/./-?name
          onclick

        /*
         * Returning success to caller.
         */
        return:bool:true


    /*
     * Activating next editor in chain.
     */
    hyper-ide.activate-next-editor

      /*
       * Finding all "activate buttons".
       */
      p5.web.widgets.find:hyper-ide-editor-tab-buttons
        .activate

      /*
       * Checking if are more than one button, and if there are, making sure we
       * "click" the next button in our chain.
       */
      if:x:/@p5.web.widgets.find/*/*?count
        >:int:1

        /*
         * Raising the "onclick" event for the activate button that is after the currently active one.
         */
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          class
        p5.web.widgets.ajax-events.raise:x:/@get-widget-property/*/*(/=~toggled)/./+?name
          onclick

        /*
         * Returning success to caller.
         */
        return:bool:true


    /*
     * Returns code for currently active editor.
     */
    hyper-ide.get-active-editor-code

      /*
       * Finding textarea and returning its innerValue.
       */
      hyper-ide.get-active-editor-id

      /*
       * Checking if above invocation returned anything.
       */
      if:x:/@hyper-ide.get-active-editor-id?value

        /*
         * Retrieves active editor's code, and returning it to caller.
         */
        get-widget-property:x:/@hyper-ide.get-active-editor-id?value
          value
        return:x:/@get-widget-property/*/*?value


    /*
     * Sets code for currently active editor.
     */
    hyper-ide.set-active-editor-code

      /*
       * First finding active editor's textarea, and updating it, in case
       * other parts of our code tries to retrieve it during the current request.
       */
      hyper-ide.get-active-editor-id

      /*
       * Checking if above invocation returned nothing, at which point we
       * return immediately.
       */
      if:x:/@hyper-ide.get-active-editor-id?value

        /*
         * Setting active editor's content to specified value.
         */
        set-widget-property:x:/@hyper-ide.get-active-editor-id?value
          value:x:/../*/_arg?value

        /*
         * Updating value of CodeMirror instance on client side.
         */
        p5.web.send-javascript:@"p5['{0}'].getDoc().setValue(p5.$('{0}').el.value);"
          :x:/@hyper-ide.get-active-editor-id?value

        /*
         * Returning success to caller.
         */
        return:bool:true


    /*
     * Saves active editor's content.
     */
    hyper-ide.save-active-editor

      /*
       * Retriving filename.
       */
      hyper-ide.get-active-editor

      /*
       * Checking if above invocation returned something.
       */
      if:x:/@hyper-ide.get-active-editor?value

        /*
         * Retrieving editor's content.
         */
        hyper-ide.get-active-editor-code

        /*
         * Saving file and providing some feedback to user.
         */
        save-file:x:/@hyper-ide.get-active-editor?value
          src:x:/@hyper-ide.get-active-editor-code?value
        micro.windows.info:File was saved
          class:micro-windows-info success

        /*
         * Returning success to caller.
         */
        return:bool:true


    /*
     * Close active editor.
     */
    hyper-ide.close-active-editor

      /*
       * Retrieving active editor, and closing it.
       */
      hyper-ide.get-active-editor

      /*
       * To stay "DRY", we invoke event that closes multiple editors, passing in
       * [exact] to make sure only active editor is closed.
       */
      eval-x:x:/+/*
      hyper-ide.close-editors
        filter:x:/@hyper-ide.get-active-editor?value
        exact:bool:true


    /*
     * Close editors.
     *
     * Will close all editors that have filenames starting with the specified [filter] path.
     * If [exact] is boolean "true", it will only delete the editor with the exact name of [filter].
     *
     * Useful for closing multiple editors, such as when a folder is deleted or something, in addition
     * to (of course) closing only a single editor (by setting exact to true).
     */
    hyper-ide.close-editors

      /*
       * Sanity checking arguments.
       */
      micro.lambda.contract.min:x:/..
        filter:string
      micro.lambda.contract.optional:x:/..
        exact:bool

      /*
       * Retrieving all open editors, and checking that there actually are any
       * open editors, and if not, returning early since there's nothing to do.
       */
      hyper-ide.get-open-editors
      if:x:/@hyper-ide.get-open-editors/*?count
        =:int:0

        /*
         * No open editors, returning early to avoid evaluating the rest of our lambda.
         */
        return

      /*
       * Retrieving active editor, since we'll need to track if it was closed or
       * not during lambda.
       */
      .active-deleted:bool:false
      hyper-ide.get-active-editor

      /*
       * Iterating through all open editors.
       */
      for-each:x:/@hyper-ide.get-open-editors/*

        /*
         * Checking if currently iterated editor is a match for our [filter] condition.
         */
        if
          starts-with:x:/@_dp/#?name
            src:x:/../*/filter?value

          /*
           * Checking if we need an exact match.
           */
          if:x:/../*/exact?value
            =:bool:true
            and:x:/@_dp/#?name
              !=:x:/../*/filter?value

            /*
             * Caller wanted an exact match, and this was not an exact match.
             */
            continue

          /*
           * Current editor is a match, making sure we delete it.
           *
           * First its activate button.
           */
          p5.web.widgets.find:hyper-ide-editor-tab-buttons
            .activate:x:/@_dp/#?name
          delete-widget:x:/-/*/*?value

          /*
           * Then its toolbar.
           */
          p5.web.widgets.find:hyper-ide-toolbars
            .toolbar:x:/@_dp/#?name
          delete-widget:x:/-/*/*?value

          /*
           * Then its actual editor.
           */
          p5.web.widgets.find:hyper-ide-editor-tab-editors
            .editor:x:/@_dp/#?name
          delete-widget:x:/-/*/*?value

          /*
           * Checking if currently closed editor was the active editor.
           */
          if:x:/@_dp/#?name
            =:x:/@hyper-ide.get-active-editor?value

            /*
             * Tracking the fact that our active editor was closed.
             */
            set:x:/@.active-deleted?value
              src:bool:true

            /*
             * Notice, when the active editor is deleted, we'll also need to check
             * if the file object toolbar was created for our active editor, and
             * if it was, we'll need to delete it too.
             */
            if
              fetch:x:/0/0?value
                widget-exists:hyper-ide-active-file-object-toolbar
              get-widget-property:hyper-ide-active-file-object-toolbar
                .file
              if:x:/@get-widget-property/*/*?value
                =:x:/@_dp/#?name

                /*
                 * Current active file object toolbar was created for the active editor,
                 * hence making sure we delete it.
                 */
                delete-widget:hyper-ide-active-file-object-toolbar

          /*
           * Removing currently iterated editor from our list of editors.
           *
           * This is done such that we end up with a list of available editors,
           * after we have closed all editors caller wants to close.
           */
          set:x:/@_dp/#

      /*
       * Checking if active editor was deleted, and if it was, we'll need to
       * either load up another editor, or load our splash screen, depending 
       * upon whether or not there are anymore editors left in our collection.
       */
      if:x:/@.active-deleted?value
        =:bool:true

        /*
         * Checking if there are anymore editors left.
         */
        if:x:/@hyper-ide.get-open-editors/*?count
          >:int:0

          /*
           * Setting the first available editor as our active editor.
           */
          hyper-ide.set-active-editor::x:/@hyper-ide.get-open-editors/0?name

        else

          /*
           * No more editors, deleting editor wrapper, and loading our 
           * splash screen, making sure we also un-select any selected tree 
           * view items.
           */
          delete-widget:hyper-ide-editor-tab
          hyper-ide.load-splash
          micro.widgets.tree.select-items:hyper-ide-folder-tree-browser
            items

          /*
           * Making sure we show our solution explorer, if it is hidden.
           */
          micro.css.delete:hyper-ide-file-browser-wrapper
            class:hide
          micro.css.delete:hyper-ide-file-editor
            class:col
          micro.css.add:hyper-ide-file-editor
            class:col-70

      else-if:x:/@hyper-ide.get-open-editors/*?count
        >:int:0

        /*
         * Regardless of whether or not the active editor was deleted, we might 
         * need to make sure our active editor becomes selected in our tree, due
         * to what occurs when deletion of a folder occurs, etc.
         */
        hyper-ide.set-active-editor:@hyper-ide.get-open-editors/0?name


  oninit

    /*
     * Starting "pingback loop", to make sure we stay inside of session.
     */
    hyper-ide._pingback

  widgets

    /*
     * Wrapper for our top toolbar and our "header" (which contains the file/folder-path).
     */
    div:hyper-ide-toolbar-wrapper
      class:row
      widgets
        div
          class:col-100
          widgets

            /*
             * Wrapper for path of file object header.
             */
            div
              style:"float:left;"
              widgets
                div
                  style:"float:left;"
                  widgets
                    small:hyper-ide-file-path-header
                      innerValue:
                      class:hyper-ide-file-path

            /*
             * Our primary toolbar.
             *
             * Contains settings and home button.
             */
            div:hyper-ide-toolbars
              style:"float:right;"
              widgets
                div
                  class:strip toolbar hyper-ide-toolbar
                  style:"float:right;"
                  widgets

                    /*
                     * Settings button.
                     */
                    button
                      innerValue:@"<span class=""icon-cog""></span>"
                      title:Settings
                      style:"margin-bottom:0;"
                      onclick

                        /*
                         * Showing settings for CM to user.
                         */
                        micro.codemirror.settings

                    /*
                     * Home button, launches desktop (or default app).
                     */
                    button
                      innerValue:@"<span class=""icon-home3""></span>"
                      title:Close Hypereval
                      style:"margin-bottom:0;"
                      onclick

                        /*
                         * Redirecting user to server's root URL.
                         */
                        p5.web.get-root-location
                        p5.web.set-location:x:/-?value

    /*
     * Wrapper for actual content.
     *
     * This is where our editors are put, and our "solution explorer" tree view, 
     * among other things.
     */
    div:hyper-ide-content-wrapper
      class:row hyper-ide-content
      widgets

        /*
         * Wrapper for our file browser, or our "solution explorer" if you wish.
         */
        div:hyper-ide-file-browser-wrapper
          class:col-30 air-top hyper-ide-solution-explorer-col
          widgets
            container
              class:air-inner shaded rounded hyper-ide-solution-explorer
              widgets

                /*
                 * Our TreeView that actually allows the user to browse 
                 * files on his server.
                 */
                micro.widgets.tree:hyper-ide-folder-tree-browser
                  class:micro-tree hyper-ide-tree-view
                  items
                    /:/

                  oninit

                    /*
                     * Expanding root item.
                     */
                    micro.widgets.tree.toggle-items:hyper-ide-folder-tree-browser
                      items
                        /

                  /*
                   * Callback invoked when TreeView wants more items.
                   */
                  .onexpand

                    /*
                     * Making sure we wrap our stuff inside of a try/catch block,
                     * since this will prevent the default exception handler from
                     * being evaluated, in case user tries to access file objects
                     * he does not have permission to access.
                     */
                    try

                      /*
                       * We need to track whether or not an exception occurs, from
                       * our [.onexpand], and into our [.onselect]. We do this by setting
                       * a "signal" viewstate value if an exception occurs.
                       *
                       * However, we need to default its value to empty, in case
                       * no exception occurs.
                       */
                      p5.web.viewstate.set:hyper-ide.no-select

                      /*
                       * Checking if this is a request for a folder.
                       */
                      if
                        ends-with:x:/../*/_item-id?value
                          src:/

                        /*
                         * Invoking file responsible for actually retrieving files
                         * and folders structure, and returning items to caller.
                         */
                        eval-x:x:/+/*
                        micro.evaluate.file:@IDE/helpers/get-file-objects.hl
                          folder:x:/../*/_item-id?value
                        add:x:/..if/*/return/*/items
                          src:x:/@micro.evaluate.file/*
                        return
                          items

                    catch

                      /*
                       * Giving user some feedback, and making sure we delete any
                       * additional toolbars that was created.
                       */
                      micro.windows.info:x:/@message?value
                        class:micro-windows-info warning
                      if
                        fetch:x:/0/0?value
                          widget-exists:hyper-ide-active-file-object-toolbar
                        delete-widget:hyper-ide-active-file-object-toolbar

                      /*
                       * Making sure we don't try to select item in any ways 
                       * further down in file.
                       */
                      p5.web.viewstate.set:hyper-ide.no-select
                        src:bool:true

                  /*
                   * Callback invoked when an item ise selected.
                   */
                  .onselect

                    /*
                     * Checking if we had an exception while invoking our [.onexpand],
                     * at which point we don't evaluate this lambda.
                     */
                    p5.web.viewstate.get:hyper-ide.no-select
                    if:x:/-/*?value

                      /*
                       * Re-setting exception signal and returning early.
                       */
                      p5.web.viewstate.set:hyper-ide.no-select
                      return

                    /*
                     * Making sure we wrap our stuff inside of a try/catch block,
                     * since this will prevent the default exception handler from
                     * being evaluated, in case user tries to access file objects
                     * he does not have permission to access.
                     */
                    try

                      /*
                       * Checking if this is a de-select invocation.
                       */
                      if:x:/../*/items/*?count
                        =:int:0

                        /*
                         * De-select invocation.
                         */
                        return

                      /*
                       * Checking if this is a request for a folder or a file.
                       */
                      if
                        ends-with:x:/../*/items/0?name
                          src:/

                        /*
                         * Request for folder.
                         *
                         * Invoking file responsible for selecting the folder.
                         */
                        eval-x:x:/+/*
                        micro.evaluate.file:@IDE/helpers/select-folder.hl
                          folder:x:/../*/items/0?name

                      else

                        /*
                         * Request for file.
                         *
                         * Invoking file responsible for selecting the file.
                         */
                        eval-x:x:/+/*
                        micro.evaluate.file:@IDE/helpers/edit-file.hl
                          file:x:/../*/items/0?name

                      /*
                       * Updating header or file/folder path.
                       */
                      set-widget-property:hyper-ide-file-path-header
                        innerValue:x:/../*/items/0?name

                    catch

                      /*
                       * Giving user some feedback, and making sure we delete any
                       * additional toolbars that was created.
                       */
                      micro.windows.info:x:/@message?value
                        class:micro-windows-info warning
                      if
                        fetch:x:/0/0?value
                          widget-exists:hyper-ide-active-file-object-toolbar
                        delete-widget:hyper-ide-active-file-object-toolbar

                      /*
                       * Returning false to let caller know we don't want to invoke
                       * our [.onexpand] lambda callback.
                       */
                      return:bool:false

        /*
         * Wrapper for our file editor.
         *
         * This is where our actual CodeMirror file editors' ends up.
         * In addition to our "splash screen".
         */
        container:hyper-ide-file-editor
          class:col-70 air-top hyper-ide-editor-col
          events


            /*
             * Loads up "splash screen".
             */
            hyper-ide.load-splash

              /*
               * Creating our initial "splash" screen.
               */
              load-file:@IDE/helpers/splash.hl
              add:x:/@load-file/*/*
                src
                  parent:hyper-ide-file-editor
              add:x:/../*/create-widgets
                src:x:/@load-file/*/*
              create-widgets

              /*
               * Making sure we reset file/folder path header.
               */
              set-widget-property:hyper-ide-file-path-header
                innerValue:


          oninit

            /*
             * Creating initial "splash" screen.
             */
            hyper-ide.load-splash
