/*
 * File responsible for starting app.
 *
 * This file is evaluated when the user clicks the desktop icon.
 */





/*
 * Checking if this is an upload request.
 */
p5.io.unroll-path:@IDE/
split:x:/-?value
  =:/
if:x:/../*/url?value
  =:/{0}/upload
    :x:/@split/0/-?name

  /*
   * This is an upload request, making sure we let our upload file handle it,
   * and returning early.
   *
   * Wrapping our attempt inside a try/catch, and returning any exception message
   * to client.
   */
  try
    micro.evaluate.file:@IDE/helpers/upload-files.hl
  catch
    p5.web.response.set-status-code:500
    p5.web.echo:x:/@message?value
  return





/*
 * Figuring out skin to use, and other settings.
 */
.defaults
  skin:serious
  page-scroll:bool:false
select-data:x:/*/*/micro.codemirror.settings





/*
 * Checking if Hyper IDE has already been launched, at which point we return early.
 */
if
  fetch:x:/0/0?value
    widget-exists:hyper-ide-main-container
  return






/*
 * Including Micro, active skin, font CSS file, and main CSS file for Hyper IDE.
 */
eval-x:x:/+/*
micro.css.include
  skin:x:(/@select-data/*/*/skin|/../*/.defaults/*/skin)/$?value
hyper-ide.version
p5.web.include-css-file:@IDE/media/main.css?v={0}
  :x:/@hyper-ide.version?value





/*
 * Setting title of our page.
 */
p5.web.page.set-title:Hyper IDE





/*
 * Making sure initial scale of viewport is set correctly.
 */
p5.web.page.add-meta-tag:meta
  name:viewport
  content:@"width=device-width, initial-scale=1.0"





/*
 * Checking if we should use page scrolling or not.
 */
_page-scroll
if:x:(/@select-data/*/*/page-scroll|/../*/.defaults/*/page-scroll)/$?value
  set:x:/@_page-scroll?value
    src:" hyper-ide-page-scroll"





/*
 * Retrieving active events that will create a "global" plugin button.
 *
 * Making sure we check for the existence of a configuration file, and if it exists,
 * we turn OFF everything not explicitly turned on in that file.
 */
vocabulary:~hyper-ide.global-plugin.
if
  fetch:x:/0/0?value
    file-exists:@IDE/configuration/plugins.hl
  load-file:@IDE/configuration/plugins.hl
  for-each:x:/@vocabulary/*
    if:x:/@load-file/*/*/{0}
      :x:/@_dp/#?value
      not
      set:x:/@_dp/#





/*
 * Adding all plugin active events into [.plugins] below.
 */
.plugins
  return:x:/../*/*
for-each:x:/@vocabulary/*?value
  insert-before:x:/@.plugins/0/-
    src:x:/@_dp?value





/*
 * Evaluating [.plugins] lambda, which will invoke all plugin button events for us,
 * and return its result.
 */
eval:x:/@.plugins





/*
 * Adding the results of above plugin creation logic into our toolbar widget.
 *
 * Notice, the above [eval] will return the results of all plugin active events.
 */
insert-before:x:/../*/create-widget/**/widgets/=plugins/0/-2
  src:x:/@eval/*





/*
 * Creating main container.
 */
create-widget:hyper-ide-main-container
  class:container-fullscreen hyper-ide-container{0}
    :x:/@_page-scroll?value
  style:"padding-top:0;"

  /*
   * Helper Ajax events, necessary to map keyboard shortcuts, among other things.
   */
  .onsave

    /*
     * Saving active editor's content.
     */
    hyper-ide.editors.save-active

  .onclose

    /*
     * Closing active editor.
     */
    hyper-ide.editors.close-active

  .onprevious

    /*
     * Activating "previous editor" in chain of open editors.
     */
    hyper-ide.editors.activate-previous

  .onnext

    /*
     * Activating "next editor" in chain of open editors.
     */
    hyper-ide.editors.activate-next

  events


    /*
     * Returns true if Hyper IDE is open.
     */
    hyper-ide.is-open
      return:bool:true


    /*
     * Pingback event, invoked every n'th minute, to avoid being thrown out of session.
     *
     * This is done to avoid having user thrown out of his session, while editing files,
     * without raising an Ajax request for 20 minutes or more.
     *
     * Basically, it creates an "empty" Ajax request, every 10 minutes, to touch the session,
     * to avoid having automatic destruction of session occur.
     */
    hyper-ide._pingback

      /*
       * Pingbacking server 10 minutes from now.
       */
      micro.lambda.create-timeout
        milliseconds:600000
        onfinish
          hyper-ide._pingback


    /*
     * Returns file paths for all open editors.
     */
    hyper-ide.editors.get-open

      /*
       * Finding all activate buttons for all editors, and returning their filenames.
       */
      p5.web.widgets.find:hyper-ide-editor-tab-buttons
        .activate
      get-widget-property:x:/@p5.web.widgets.find/*/*?value
        .activate

      /*
       * Iterating through all filenames returned above, and making sure we return
       * them to caller.
       */
      for-each:x:/@get-widget-property/*/*?value
        add:x:/../*/return
          src:x:/@_dp?value
      return


    /*
     * Returns ID for active editor, if any.
     */
    hyper-ide.editors.get-active-id

      /*
       * Finding visible editor.
       */
      p5.web.widgets.find:hyper-ide-editor-tab-editors
        .editor

      /*
       * Checking that above event returned something.
       */
      if:x:/@p5.web.widgets.find/*/*?count
        >:int:0

        /*
         * Finding CSS classes for all editors, such that we can determine which
         * editor is enabled.
         */
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          class

        /*
         * Finding textarea widget of visible editor and returning to caller.
         */
        p5.web.widgets.find:x:/@get-widget-property/*/*(!/=~hide)/.?name
          element:textarea
        return:x:/@p5.web.widgets.find/*/*?value


    /*
     * Returns file path for active editor, if any.
     */
    hyper-ide.editors.get-active

      /*
       * Finding visible editor.
       */
      p5.web.widgets.find:hyper-ide-editor-tab-editors
        .editor

      /*
       * Checking that above event returned something.
       */
      if:x:/@p5.web.widgets.find/*/*?count
        >:int:0

        /*
         * Finding CSS classes for all editors, such that we can determine which
         * editor is enabled.
         */
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          class

        /*
         * Returning active editor's filepath to caller.
         */
        get-widget-property:x:/@get-widget-property/*/*(!/=~hide)/.?name
          .editor
        return:x:/@get-widget-property/*/*?value


    /*
     * Sets the active editor.
     *
     * Pass in [_arg] being filename of editor to activate.
     */
    hyper-ide.editors.set-active

      /*
       * Finding all open editors, and making sire the editor caller is trying
       * to activate, actually exists, and is open.
       */
      hyper-ide.editors.get-open
      if:x:@"/@hyper-ide.editors.get-open/*/""{0}"""
        :x:/../*/_arg?value

        /*
         * Editor passed in as [_arg] was found.
         *
         * For simplicity reasons, we simply select tree view item associated
         * with editor, since this will map up everything automatically for us.
         */
        add:x:/./*/micro.widgets.tree.select-items/*/items
          src:x:/../*/_arg?value
        micro.widgets.tree.select-items:hyper-ide-folder-tree-browser
          items

        /*
         * Making sure we scroll our selected tree view item into view.
         */
        p5.web.widgets.find-first-like:hyper-ide-folder-tree-browser
          class:tree-selected

        /*
         * Returning true to caller, indicating that we had success in setting
         * the current editor.
         */
        return:bool:true


    /*
     * Activating previous editor in chain.
     */
    hyper-ide.editors.activate-previous

      /*
       * Finding all "activate buttons".
       */
      p5.web.widgets.find:hyper-ide-editor-tab-buttons
        .activate

      /*
       * Checking if are more than one button, and if there are, making sure we
       * "click" the previous button in our chain.
       */
      if:x:/@p5.web.widgets.find/*/*?count
        >:int:1

        /*
         * Raising the "onclick" event for the activate button that is before the currently active one.
         */
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          class
        p5.web.widgets.ajax-events.raise:x:/@get-widget-property/*/*(/=~toggled)/./-?name
          .onclick

        /*
         * Returning success to caller.
         */
        return:bool:true


    /*
     * Activating next editor in chain.
     */
    hyper-ide.editors.activate-next

      /*
       * Finding all "activate buttons".
       */
      p5.web.widgets.find:hyper-ide-editor-tab-buttons
        .activate

      /*
       * Checking if are more than one button, and if there are, making sure we
       * "click" the next button in our chain.
       */
      if:x:/@p5.web.widgets.find/*/*?count
        >:int:1

        /*
         * Raising the "onclick" event for the activate button that is after the currently active one.
         */
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          class
        p5.web.widgets.ajax-events.raise:x:/@get-widget-property/*/*(/=~toggled)/./+?name
          .onclick

        /*
         * Returning success to caller.
         */
        return:bool:true


    /*
     * Returns code for currently active editor.
     */
    hyper-ide.editors.get-active-code

      /*
       * Finding textarea and returning its innerValue.
       */
      hyper-ide.editors.get-active-id

      /*
       * Checking if above invocation returned anything.
       */
      if:x:/@hyper-ide.editors.get-active-id?value

        /*
         * Retrieves active editor's code, and returning it to caller.
         */
        get-widget-property:x:/@hyper-ide.editors.get-active-id?value
          value
        return:x:/@get-widget-property/*/*?value


    /*
     * Sets code for currently active editor.
     */
    hyper-ide.editors.set-active-code

      /*
       * First finding active editor's textarea, and updating it, in case
       * other parts of our code tries to retrieve it during the current request.
       */
      hyper-ide.editors.get-active-id

      /*
       * Checking if above invocation returned nothing, at which point we
       * return immediately.
       */
      if:x:/@hyper-ide.editors.get-active-id?value

        /*
         * Setting active editor's content to specified value.
         */
        set-widget-property:x:/@hyper-ide.editors.get-active-id?value
          value:x:/../*/_arg?value

        /*
         * Updating value of CodeMirror instance on client side.
         */
        p5.web.send-javascript:@"p5['{0}'].getDoc().setValue(p5.$('{0}').el.value);"
          :x:/@hyper-ide.editors.get-active-id?value

        /*
         * Returning success to caller.
         */
        return:bool:true


    /*
     * Returns code for specified [_arg] editor.
     */
    hyper-ide.editors.get-code

      /*
       * Sanity check.
       */
      micro.lambda.contract.min:x:/..
        _arg:string

      /*
       * Finding editor's textarea, and returning its value.
       */
      p5.web.widgets.find-first:hyper-ide-editor-tab-editors
        .editor:x:/../*/_arg?value
      p5.web.widgets.find-first:x:/-/*/*?value
        element:textarea
      get-widget-property:x:/-/*/*?value
        value
      return:x:/-/*/*?value


    /*
     * Sets the code for specified [_arg] editor.
     * Pass in new code as [content].
     */
    hyper-ide.editors.set-code

      /*
       * Sanity check.
       */
      micro.lambda.contract.min:x:/..
        _arg:string
        content:string

      /*
       * Finding editor's wrapper widget's textarea, and setting its value.
       */
      p5.web.widgets.find-first:hyper-ide-editor-tab-editors
        .editor:x:/../*/_arg?value
      p5.web.widgets.find-first:x:/-/*/*?value
        element:textarea
      set-widget-property:x:/-/*/*?value
        value:x:/../*/content?value


    /*
     * Saves specified [_arg] editor's content.
     */
    hyper-ide.editors.save

      /*
       * Sanity check.
       */
      micro.lambda.contract.min:x:/..
        _arg:string

      /*
       * Getting editor's content, saving it, and resetting its dirty flag.
       */
      hyper-ide.editors.get-code:x:/../*/_arg?value
      save-file:x:/../*/_arg?value
        src:x:/@hyper-ide.editors.get-code?value
      p5.web.widgets.find-first:hyper-ide-editor-tab-editors
        .editor:x:/../*/_arg?value
      p5.web.widgets.find-first:x:/-/*/*?value
        element:input
        type:hidden
      set-widget-property:x:/-/*/*?value
        value:clean


    /*
     * Saves active editor's content.
     */
    hyper-ide.editors.save-active

      /*
       * Avoiding having exceptions leave event.
       */
      try

        /*
         * Retriving filename.
         */
        hyper-ide.editors.get-active

        /*
         * Checking if above invocation returned something.
         */
        if:x:/@hyper-ide.editors.get-active?value

          /*
           * Saving editor, and providing some feedback to user.
           */
          hyper-ide.editors.save:x:/@hyper-ide.editors.get-active?value
          micro.windows.info:File was saved
            class:micro-windows-info success

          /*
           * Returning success to caller.
           */
          return:bool:true

      catch

        /*
         * Displaying a friendly message to user.
         */
        micro.windows.info:You don't have permissions to modify that file
          class:micro-windows-info warning


    /*
     * Removes the "dirty" flag for specified [_arg] editor.
     */
    hyper-ide.set-clean

      /*
       * Sanity check.
       */
      micro.lambda.contract.min:x:/..
        _arg:string

      /*
       * Finding hidden field, and returning true if its value is "dirty".
       */
      p5.web.widgets.find-first:hyper-ide-editor-tab-editors
        .editor:x:/../*/_arg?value
      p5.web.widgets.find-first:x:/-/*/*?value
        element:input
        type:hidden
      set-widget-property:x:/-/*/*?value
        value:clean


    /*
     * Adds the "dirty" flag for specified [_arg] editor.
     */
    hyper-ide.set-dirty

      /*
       * Sanity check.
       */
      micro.lambda.contract.min:x:/..
        _arg:string

      /*
       * Finding hidden field, and returning true if its value is "dirty".
       */
      p5.web.widgets.find-first:hyper-ide-editor-tab-editors
        .editor:x:/../*/_arg?value
      p5.web.widgets.find-first:x:/-/*/*?value
        element:input
        type:hidden
      set-widget-property:x:/-/*/*?value
        value:dirty


    /*
     * Returns true if current editor is dirty.
     */
    hyper-ide.editors.is-dirty

      /*
       * Sanity check.
       */
      micro.lambda.contract.min:x:/..
        _arg:string

      /*
       * Finding hidden field, and returning true if its value is "dirty".
       */
      p5.web.widgets.find-first:hyper-ide-editor-tab-editors
        .editor:x:/../*/_arg?value
      p5.web.widgets.find-first:x:/-/*/*?value
        element:input
        type:hidden
      get-widget-property:x:/-/*/*?value
        value
      if:x:/-/*/*?value
        =:dirty
        return:bool:true
      return:bool:false


    /*
     * Close active editor.
     */
    hyper-ide.editors.close-active

      /*
       * Retrieving active editor, and closing it.
       */
      hyper-ide.editors.get-active
      if:x:/-?value
        not
        return

      /*
       * To stay "DRY", we invoke event that closes multiple editors, passing in
       * [exact] to make sure only active editor is closed.
       */
      eval-x:x:/+/*
      hyper-ide.editors.close
        filter:x:/@hyper-ide.editors.get-active?value
        exact:bool:true


    /*
     * Close editors.
     *
     * Will close all editors that have filenames starting with the specified [filter] path.
     * If [exact] is boolean "true", it will only delete the editor with the exact name of [filter].
     *
     * Useful for closing multiple editors, such as when a folder is deleted or something, in addition
     * to (of course) closing only a single editor (by setting exact to true).
     */
    hyper-ide.editors.close

      /*
       * Sanity checking arguments.
       */
      micro.lambda.contract.min:x:/..
        filter:string
      micro.lambda.contract.optional:x:/..
        exact:bool

      /*
       * Retrieving all open editors, and checking that there actually are any
       * open editors, and if not, returning early since there's nothing to do.
       */
      hyper-ide.editors.get-open
      if:x:/@hyper-ide.editors.get-open/*?count
        =:int:0

        /*
         * No open editors, returning early to avoid evaluating the rest of our lambda.
         */
        eval:x:/../*/.onclosed
        return

      /*
       * Retrieving active editor, since we'll need to track if it was closed or
       * not during lambda.
       */
      .active-deleted:bool:false
      hyper-ide.editors.get-active

      /*
       * Iterating through all open editors.
       */
      for-each:x:/@hyper-ide.editors.get-open/*

        /*
         * Checking if currently iterated editor is a match for our [filter] condition.
         */
        if
          starts-with:x:/@_dp/#?name
            src:x:/../*/filter?value

          /*
           * Checking if we need an exact match.
           */
          if:x:/../*/exact?value
            =:bool:true
            and:x:/@_dp/#?name
              !=:x:/../*/filter?value

            /*
             * Caller wanted an exact match, and this was not an exact match.
             */
            continue

          /*
           * Current editor is a match, making sure we delete it.
           * Checking if currently iterated editor is dirty.
           */
          if
            hyper-ide.editors.is-dirty:x:/@_dp/#?name

            /*
             * Editor is dirty, and [force] was not set to true, hence asking user to
             * confirm that he wants to actually close the editor, giving him the
             * option of saving its content first.
             *
             * Making sure we only show one dialog though.
             */
            if
              fetch:x:/0/0?value
                widget-exists:hyper-ide-unsaved-changes-modal
              not

              /*
               * Asking user to confirm that he wants to have editor closed.
               */
              hyper-ide.editors.set-active:x:/@_dp/#?name
              add:x:/+2/**/.onclosed
                src:x:/../*/.onclosed/*
              eval-x:x:/+/*/*/*/p/*/innerValue|/+/**(/.filter|/.file)
              create-widgets
                micro.widgets.modal:hyper-ide-unsaved-changes-modal
                  widgets
                    h3
                      innerValue:Unsaved content
                    p
                      innerValue:<code>{0}</code> contains unsaved data. Do you wish to save it before closing your editor?
                        :x:/@_dp/#?name
                    div
                      class:right
                      widgets
                        div
                          class:strip
                          style:"display:inline-block;"
                          widgets
                            button
                              innerValue:Yes
                              style:"margin-bottom:0;"
                              oninit

                                /*
                                 * Making sure our "Yes" button gets initial focus.
                                 */
                                micro.page.set-focus:x:/../*/_event?value

                              onclick

                                /*
                                 * Forward evaluated above.
                                 * Saves given editor, and reinvokes self.
                                 */
                                .file:x:/@_dp/#?name
                                .filter:x:/../*/filter?value
                                .onclosed
                                hyper-ide.editors.save:x:/@.file?value

                                /*
                                 * Deleting modal widget, and giving user some feedback,
                                 * before we invoke "self".
                                 */
                                delete-widget:hyper-ide-unsaved-changes-modal
                                micro.windows.info:File successfully saved
                                  class:micro-windows-info success
                                add:x:/../*/hyper-ide.editors.close
                                  src:x:/@.onclosed
                                eval-x:x:/+/*
                                hyper-ide.editors.close
                                  filter:x:/@.filter?value

                            button
                              innerValue:No
                              style:"margin-bottom:0;"
                              onclick

                                /*
                                 * Forward evaluated above.
                                 * Reinvokes self after having set editor to "clean".
                                 */
                                .file:x:/@_dp/#?name
                                .filter:x:/../*/filter?value
                                .onclosed
                                hyper-ide.set-clean:x:/@.file?value

                                /*
                                 * Deleting modal widget, before we invoke "self".
                                 */
                                delete-widget:hyper-ide-unsaved-changes-modal
                                add:x:/../*/hyper-ide.editors.close
                                  src:x:/@.onclosed
                                eval-x:x:/+/*
                                hyper-ide.editors.close
                                  filter:x:/@.filter?value

          else

            /*
             * Editor is not dirty.
             * Deleting actual editor.
             */
            p5.web.widgets.find-first:hyper-ide-editor-tab-editors
              .editor:x:/@_dp/#?name
            delete-widget:x:/@p5.web.widgets.find-first/*/*?value

            /*
             * Then its activate button.
             */
            p5.web.widgets.find-first:hyper-ide-editor-tab-buttons
              .activate:x:/@_dp/#?name
            delete-widget:x:/@p5.web.widgets.find-first/*/*?value

            /*
             * Then its toolbar.
             */
            p5.web.widgets.find-first:hyper-ide-toolbars
              .toolbar:x:/@_dp/#?name
            delete-widget:x:/@p5.web.widgets.find-first/*/*?value

            /*
             * Checking if currently closed editor was the active editor.
             */
            if:x:/@_dp/#?name
              =:x:/@hyper-ide.editors.get-active?value

              /*
               * Tracking the fact that our active editor was closed.
               */
              set:x:/@.active-deleted?value
                src:bool:true

              /*
               * Notice, when the active editor is deleted, we'll also need to check
               * if the file object toolbar was created for our active editor, and
               * if it was, we'll need to delete it too.
               */
              if
                fetch:x:/0/0?value
                  widget-exists:hyper-ide-active-file-object-toolbar
                get-widget-property:hyper-ide-active-file-object-toolbar
                  .file
                if:x:/@get-widget-property/*/*?value
                  =:x:/@_dp/#?name

                  /*
                   * Current active file object toolbar was created for the active editor,
                   * hence making sure we delete it.
                   */
                  delete-widget:hyper-ide-active-file-object-toolbar

            /*
             * Removing currently iterated editor from our list of editors.
             *
             * This is done such that we end up with a list of available editors,
             * after we have closed all editors caller wants to close.
             */
            set:x:/@_dp/#

      /*
       * Checking if active editor was deleted, and if it was, we'll need to
       * either load up another editor, or load our splash screen, depending 
       * upon whether or not there are anymore editors left in our collection.
       */
      if:x:/@.active-deleted?value
        =:bool:true

        /*
         * Checking if there are anymore editors left.
         */
        if:x:/@hyper-ide.editors.get-open/*?count
          >:int:0

          /*
           * Setting the first available editor as our active editor.
           */
          hyper-ide.editors.set-active::x:/@hyper-ide.editors.get-open/0?name

        else

          /*
           * No more editors, deleting editor wrapper, and loading our 
           * splash screen, making sure we also un-select any selected tree 
           * view items.
           */
          delete-widget:hyper-ide-editor-tab
          hyper-ide.load-splash
          micro.widgets.tree.select-items:hyper-ide-folder-tree-browser
            items

          /*
           * Making sure we show our solution explorer, if it is hidden.
           */
          micro.css.delete:hyper-ide-file-browser-wrapper
            class:hide
          micro.css.delete:hyper-ide-file-editor
            class:col
          micro.css.add:hyper-ide-file-editor
            class:col-70

      else-if:x:/@hyper-ide.editors.get-open/*?count
        >:int:0

        /*
         * Regardless of whether or not the active editor was deleted, we might 
         * need to make sure our active editor becomes selected in our tree, due
         * to what occurs when deletion of a folder occurs, etc.
         */
        hyper-ide.editors.set-active:@hyper-ide.editors.get-open/0?name

      /*
       * Checking if we have unsaved changes, and if so, returning false, otherwise
       * returning true.
       */
      if
        fetch:x:/0/0?value
          widget-exists:hyper-ide-unsaved-changes-modal
        return:bool:false

      /*
       * Evaluating any optional [.onclose] lambda callbacks.
       */
      eval:x:/../*/.onclosed
      return:bool:true


  oninit

    /*
     * Starting "pingback loop", to make sure we stay inside of session.
     */
    hyper-ide._pingback

  widgets

    /*
     * Wrapper for our top toolbar and our "header" (which contains the file/folder-path).
     */
    div:hyper-ide-toolbar-wrapper
      class:row
      widgets
        div
          class:col-100
          widgets

            /*
             * Wrapper for path of file object header.
             */
            div
              style:"float:left;"
              widgets
                a
                  href:#
                  innerValue:
                  target:_blank
                  class:hyper-ide-file-path
                  events

                    /*
                     * Invoke to change "breadcrumb"'s text and href.
                     */
                    hyper-ide.set-path

                      /*
                       * Setting innerValue and href.
                       */
                      set-widget-property:x:/../*/_event?value
                        href:x:/../*/_arg?value
                        innerValue:x:/../*/_arg?value

                    /*
                     * Invoke to get "breadcrumb"'s href.
                     */
                    hyper-ide.get-path
                      get-widget-property:x:/../*/_event?value
                        href
                      return:x:/@get-widget-property/*/*?value

            /*
             * Our primary toolbar.
             *
             * Contains login/logout, home button, and "system wide" plugins.
             */
            div
              style:"float:right;"
              widgets
                div
                  class:strip hyper-ide-toolbar
                  style:"float:right;"
                  widgets

                    /*
                     * Home button, launches desktop (or default app).
                     */
                    button
                      innerValue:@"<span class=""icon-home3""></span>"
                      title:Close Hyper IDE
                      style:"margin-bottom:0;"
                      onclick

                        /*
                         * Making sure we close all editors, and checking if event
                         * returns "false", which implies we have unsaved changes,
                         * and we need to ask user about confirmation before we allow
                         * him to leave page.
                         */
                        hyper-ide.editors.close
                          filter:/
                          .onclosed

                            /*
                             * Redirecting user to server's root URL.
                             */
                            p5.web.get-root-location
                            p5.web.set-location:x:/-?value

            /*
             * Our secondary toolbar.
             *
             * Contains help, settings, close all editors and "global plugins" for Hyper IDE.
             */
            div:hyper-ide-toolbars
              style:"float:right;"
              widgets
                div
                  class:strip hyper-ide-toolbar
                  style:"float:right;"
                  widgets:plugins

                    /*
                     * Help button.
                     */
                    button
                      innerValue:@"<span class=""icon-question""></span>"
                      title:Help
                      style:"margin-bottom:0;"
                      onclick

                        /*
                         * Toggling visibility of help files.
                         */
                        if
                          hyper-ide.help-visible

                          /*
                           * Help already visible, hiding it.
                           */
                          hyper-ide.close-help

                        else

                          /*
                           * Launching help.
                           */
                          micro.evaluate.file:@IDE/helpers/display-help.hl

                        /*
                         * Making sure we toggle toggled state of button.
                         */
                        micro.css.toggle:x:/../*/_event?value
                          class:toggled

                    /*
                     * Settings button.
                     */
                    button
                      innerValue:@"<span class=""icon-cog""></span>"
                      title:Settings
                      style:"margin-bottom:0;"
                      oninit

                        /*
                         * Verifying user is "root", and if not, deleting the settings button,
                         * since it among other things, allows the user to enable and disable modules,
                         * at a global level.
                         */
                        whoami
                        if:x:/-/*/role?value
                          !=:root
                          delete-widget:x:/../*/_event?value

                      onclick

                        /*
                         * Allowing user to modify his settings.
                         */
                        micro.codemirror.settings
                          checkbox
                            info:Browser scroll
                            title:If true, will enable the browser scroll bars when document(s) overflows the size of viewport
                            .data-field:page-scroll
                            oninit

                              /*
                               * Making sure we retrieve existing value.
                               */
                              .defaults
                                page-scroll:bool:false
                              select-data:x:/*/*/micro.codemirror.settings
                              if:x:(/@select-data/*/*/page-scroll|/../*/.defaults/*/page-scroll)/$?value
                                =:bool:true
                                set-widget-property:x:/../*/_event?value
                                  checked

                    /*
                     * Bookmark button.
                     */
                    button:hyper-ide-bookmark-button
                      innerValue:@"<span class=""icon-bookmark""></span>"
                      title:Copy URL to current path
                      style:"margin-bottom:0;"
                      disabled
                      onclick

                        /*
                         * Shows the URL for the current path to the user.
                         */
                        create-widget:hyper-ide-bookmark-url
                          element:input
                          type:text
                          class:hyper-ide-bookmark-textbox
                          onkeydown:@"if (event.keyCode == 13 || event.keyCode == 27) {p5.$('hyper-ide-bookmark-url').raise('.onclose');return false;}"
                          onblur
                          
                            /*
                             * Simply invoking [.onclose] when widget looses focus.
                             */
                            p5.web.widgets.ajax-events.raise:x:/../*/_event?value
                              .onclose

                          .onclose

                            /*
                             * Deleting widget.
                             */
                            delete-widget:x:/../*/_event?value

                          oninit

                            /*
                             * Figuring out the URL for current path, and selecting all text.
                             */
                            p5.web.get-location
                            hyper-ide.get-path
                            set-widget-property:x:/../*/_event?value
                              value:{0}?path={1}
                                :x:/@p5.web.get-location?value
                                :x:/@hyper-ide.get-path?value
                            micro.page.set-focus:x:/../*/_event?value

                    /*
                     * Close all editors button.
                     */
                    button:hyper-ide-close-all-editors
                      innerValue:@"<span class=""icon-cross""></span>"
                      title:Close all editors
                      disabled
                      style:"margin-bottom:0;"
                      onclick

                        /*
                         * Making sure we close all editors.
                         */
                        hyper-ide.editors.close
                          filter:/

    /*
     * Wrapper for actual content.
     *
     * This is where our editors are put, and our "solution explorer" tree view, 
     * among other things.
     */
    div:hyper-ide-content-wrapper
      class:row hyper-ide-content
      widgets

        /*
         * Wrapper for our file browser, or our "solution explorer" if you wish.
         */
        div:hyper-ide-file-browser-wrapper
          class:col-30 air-top hyper-ide-solution-explorer-col
          widgets
            container
              class:air-inner shaded rounded hyper-ide-solution-explorer
              widgets

                /*
                 * Our TreeView that actually allows the user to browse 
                 * files on his server.
                 */
                micro.widgets.tree:hyper-ide-folder-tree-browser
                  class:micro-tree hyper-ide-tree-view
                  items
                    /:/

                  oninit

                    /*
                     * Expanding root item.
                     */
                    micro.widgets.tree.toggle-items:hyper-ide-folder-tree-browser
                      items
                        /

                  /*
                   * Callback invoked when TreeView wants more items.
                   */
                  .onexpand

                    /*
                     * Making sure we wrap our stuff inside of a try/catch block,
                     * since this will prevent the default exception handler from
                     * being evaluated, in case user tries to access file objects
                     * he does not have permission to access.
                     */
                    try

                      /*
                       * We need to track whether or not an exception occurs, from
                       * our [.onexpand], and into our [.onselect]. We do this by setting
                       * a "signal" viewstate value if an exception occurs.
                       *
                       * However, we need to default its value to empty, in case
                       * no exception occurs.
                       */
                      p5.web.viewstate.set:hyper-ide.no-select

                      /*
                       * Checking if this is a request for a folder.
                       */
                      if
                        ends-with:x:/../*/_item-id?value
                          src:/

                        /*
                         * Invoking file responsible for actually retrieving files
                         * and folders structure, and returning items to caller.
                         */
                        eval-x:x:/+/*
                        micro.evaluate.file:@IDE/helpers/get-file-objects.hl
                          folder:x:/../*/_item-id?value
                        add:x:/..if/*/return/*/items
                          src:x:/@micro.evaluate.file/*
                        return
                          items

                    catch

                      /*
                       * Giving user some feedback, and making sure we delete any
                       * additional toolbars that was created.
                       */
                      micro.windows.info:x:/@message?value
                        class:micro-windows-info warning
                      if
                        fetch:x:/0/0?value
                          widget-exists:hyper-ide-active-file-object-toolbar
                        delete-widget:hyper-ide-active-file-object-toolbar

                      /*
                       * Making sure we don't try to select item in any ways 
                       * further down in file.
                       */
                      p5.web.viewstate.set:hyper-ide.no-select
                        src:bool:true

                  /*
                   * Callback invoked when an item ise selected.
                   */
                  .onselect

                    /*
                     * Checking if we had an exception while invoking our [.onexpand],
                     * at which point we don't evaluate this lambda.
                     */
                    p5.web.viewstate.get:hyper-ide.no-select
                    if:x:/-/*?value

                      /*
                       * Re-setting exception signal and returning early.
                       */
                      p5.web.viewstate.set:hyper-ide.no-select
                      return

                    /*
                     * Making sure we wrap our stuff inside of a try/catch block,
                     * since this will prevent the default exception handler from
                     * being evaluated, in case user tries to access file objects
                     * he does not have permission to access.
                     */
                    try

                      /*
                       * Checking if this is a de-select invocation.
                       */
                      if:x:/../*/items/*?count
                        =:int:0

                        /*
                         * De-select invocation.
                         */
                        return

                      /*
                       * Checking if this is a request for a folder or a file.
                       */
                      if
                        ends-with:x:/../*/items/0?name
                          src:/

                        /*
                         * Request for folder.
                         *
                         * Invoking file responsible for selecting the folder.
                         */
                        eval-x:x:/+/*
                        micro.evaluate.file:@IDE/helpers/select-folder.hl
                          folder:x:/../*/items/0?name

                      else

                        /*
                         * Request for file.
                         *
                         * Invoking file responsible for selecting the file.
                         */
                        eval-x:x:/+/*
                        micro.evaluate.file:@IDE/helpers/edit-file.hl
                          file:x:/../*/items/0?name

                      /*
                       * Updating header or file/folder path.
                       */
                      hyper-ide.set-path:x:/../*/items/0?name

                      /*
                       * Making sure we enable our "bookmark button".
                       */
                      delete-widget-property:hyper-ide-bookmark-button
                        disabled

                    catch

                      /*
                       * Giving user some feedback, and making sure we delete any
                       * additional toolbars that was created.
                       */
                      micro.windows.info:x:/@message?value
                        class:micro-windows-info warning
                      if
                        fetch:x:/0/0?value
                          widget-exists:hyper-ide-active-file-object-toolbar
                        delete-widget:hyper-ide-active-file-object-toolbar

                      /*
                       * Returning false to let caller know we don't want to invoke
                       * our [.onexpand] lambda callback.
                       */
                      return:bool:false

        /*
         * Wrapper for our file editor.
         *
         * This is where our actual CodeMirror file editors' ends up.
         * In addition to our "splash screen".
         */
        container:hyper-ide-file-editor
          class:col-70 air-top hyper-ide-editor-col
          events


            /*
             * Loads up "splash screen".
             */
            hyper-ide.load-splash

              /*
               * Creating our initial "splash" screen.
               */
              load-file:@IDE/helpers/splash.hl
              add:x:/@load-file/*/*
                src
                  parent:hyper-ide-file-editor
              add:x:/../*/create-widgets
                src:x:/@load-file/*/*
              create-widgets

              /*
               * Making sure we reset file/folder path header.
               */
              hyper-ide.set-path:x:/../*/items/0?name

              /*
               * Making sure we disable our "Close all editors" button.
               */
              set-widget-property:hyper-ide-close-all-editors
                disabled


          oninit

            /*
             * Creating initial "splash" screen.
             */
            hyper-ide.load-splash





/*
 * Checking if client requested to open a specific file or path initially,
 * and if so, invoking file responsible for doing just that.
 */
p5.web.query.get:path
if:x:/@p5.web.query.get/*?value
  eval-x:x:/+/*
  micro.evaluate.file:@IDE/helpers/open-path.hl
    path:x:/@p5.web.query.get/*?value
