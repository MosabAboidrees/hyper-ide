/*
 * File responsible for starting app.
 *
 * This file is evaluated when the user clicks the desktop icon.
 */





/*
 * Including Micro, its "serious" skin, font CSS file, and main CSS file for Hypereval.
 */
p5.web.include-css-file
  @MICRO/media/main.css
  @MICRO/media/skins/serious.css
  @MICRO/media/fonts.css
  @IDE/media/main.css





/*
 * Verifying user is logged in as root, and if not, 
 * forcing the user to login before we proceed.
 */
whoami
if:x:/@whoami/*/role?value
  !=:root

  /*
   * User is not logged in as root.
   */
  p5.core.login
    message:You'll need to login with a root account to access this module

  /*
   * Returning early to abort evaluating the rest of our file.
   */
  return





/*
 * Creating main container, making sure we set the title of our page.
 */
p5.web.page.set-title:Hyper IDE
create-widget:hyper-ide-main-container
  class:container-fullscreen
  events

    /*
     * Piongback event, invoked every n'th minute, to avoid being thrown out of session.
     *
     * This is done to avoid having user thrown out of his session, while editing files,
     * without raising an Ajax request for 20 minutes or more.
     *
     * Basically, it creates an "empty" Ajax request, every 10 minutes, to touch the session,
     * to avoid having automatic destruction of session occur.
     */
    hyper-ide.pingback

      /*
       * Pingbacking server 10 minutes from now.
       */
      micro.lambda.create-timeout
        milliseconds:600000
        onfinish
          hyper-ide.pingback

  oninit

    /*
     * Starting "pingback loop", to make sure we stay inside of session.
     */
    hyper-ide.pingback

  widgets

    /*
     * Wrapper for our top toolbar.
     */
    div
      class:row
      widgets
        div
          class:col-100
          widgets
            literal
              element:h4
              class:hyper-ide-header
              events

                /*
                 * Event responsible for setting header of module.
                 */
                hyper-ide.set-header
                  set-widget-property:x:/../*/_event?value
                    innerValue:x:/../*/_arg?value

            div
              class:right
              widgets
                div:hyper-ide-main-toolbar
                  class:strip toolbar
                  style:"display:inline-block;margin-left:1rem;"
                  widgets

                    button
                      innerValue:@"<span class=""icon-cog""></span>"
                      title:Settings
                      style:"margin-bottom:0;"
                      onclick

                        /*
                         * Showing settings for CM to user.
                         */
                        hypereval.codemirror.settings


                    button
                      innerValue:@"<span class=""icon-home3""></span>"
                      title:Close Hypereval
                      style:"margin-bottom:0;"
                      onclick

                        /*
                         * Redirecting user to server's root URL.
                         */
                        p5.web.get-root-location
                        p5.web.set-location:x:/-?value

    /*
     * Wrapper for actual content.
     */
    div
      class:row
      widgets

        /*
         * Wrapper for our object editor.
         */
        div:hyper-ide-object-details
          class:col-100
          widgets
            container:hyper-ide-editor
              style:"overflow:auto;"
              widgets
                container:hyper-ide-active-object-wrapper

        /*
         * Wrapper for our file browser.
         */
        div:hyper-ide-file-browser-wrapper
          class:col-30
          widgets
            container
              class:bg air-inner shaded rounded hyper-ide-folder-browser
              widgets

                /*
                 * Our TreeView that actually allows the user to browse 
                 * files on his server.
                 */
                micro.widgets.tree:hyper-ide-folder-tree-browser
                  items
                    /:/

                  oninit

                    /*
                     * Expanding root item.
                     */
                    micro.widgets.tree.toggle-items:hyper-ide-folder-tree-browser
                      items
                        /
                    micro.widgets.tree.select-items:hyper-ide-folder-tree-browser
                      items
                        /

                  /*
                   * Callback invoked when TreeView wants more items.
                   */
                  .onexpand

                    /*
                     * Checking if this is a request for a folder.
                     */
                    if
                      ends-with:x:/../*/_item-id?value
                        src:/

                      /*
                       * Invoking file responsible for actually retrieving files
                       * and folders structure, and returning items to caller.
                       */
                      eval-x:x:/+/*
                      micro.evaluate.file:@IDE/helpers/get-files.hl
                        folder:x:/../*/_item-id?value
                      add:x:/..if/*/return/*/items
                        src:x:/@micro.evaluate.file/*
                      return
                        items

                  /*
                   * Callback invoked when an item ise selected.
                   */
                  .onselect

                    /*
                     * Checking if this is a request for a folder or a file.
                     */
                    if
                      ends-with:x:/../*/items/0?name
                        src:/

                      /*
                       * Request for folder.
                       *
                       * Invoking file responsible for selecting the folder.
                       */
                      eval-x:x:/+/*
                      micro.evaluate.file:@IDE/helpers/select-folder.hl
                        folder:x:/../*/items/0?name

                    else

                      /*
                       * Request for file.
                       *
                       * Invoking file responsible for selecting the file.
                       */
                      eval-x:x:/+/*
                      micro.evaluate.file:@IDE/helpers/select-file.hl
                        file:x:/../*/items/0?name

                      /*
                       * Checking if this was the file that was previously selected,
                       * which implies that user clicked the same file twice, at
                       * which point we start editing it.
                       */
                      if:x:/../*/double-clicked?value
                        =:bool:true

                        /*
                         * Since file was "double clicked", we instantiate its editor.
                         */
                        eval-x:x:/+/*
                        micro.evaluate.file:@IDE/helpers/edit-file.hl
                          file:x:/../*/items/0?name

        /*
         * Wrapper for our file editor.
         */
        container:hyper-ide-file-editor
          class:col-70
