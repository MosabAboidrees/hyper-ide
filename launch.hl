
/*
 * File responsible for starting Hyper IDE.
 */





/*
 * Checking if Hyper IDE has already been launched, at which point we
 * warn user and return early.
 */
if
  hyper-ide.is-open
  micro.windows.info:Hyper IDE is already open
    class:micro-windows-info warning
  return





/*
 * Retrieving user's settings, which we need to retrieve in order to determine
 * how to render Hyper IDE.
 */
.defaults
  page-scroll:bool:false
p5.auth.my-settings.get






/*
 * Including Micro CSS.
 */
micro.css.include





/*
 * Including Hyper IDE's CSS file, making sure we can refresh cache on client,
 * every time we create a new release, to avoid having "old CSS files" 'hanging'
 * in browser cache.
 *
 * We do this by applying an HTTP query parameter to our CSS inclusion element on
 * the client.
 */
hyper-ide.version
p5.web.include-css-file:@IDE/media/main.css?v={0}
  :x:/@hyper-ide.version?value





/*
 * Setting title of our page, making sure we display version number of Hyper IDE.
 */
p5.web.page.set-title:Hyper IDE {0}
  :x:/@hyper-ide.version?value





/*
 * Checking if we should use page scrolling or not, and if so, making sure we
 * change Hyper IDE's root element's CSS class accordingly.
 */
_css-addons
if:x:(/@p5.auth.my-settings.get/*/codemirror/*/page-scroll|/@.defaults/*/page-scroll)/$?value
  =:bool:true

  /*
   * User has configured Hyper IDE to use "page scroll".
   *
   * This implies that the CodeMirror editors and the folder browser will always render
   * themselves in "auto height", not using scrollbars on their actual widgets,
   * which might make sense for some users - Especially if they're using a tablet or
   * a phone as their client.
   */
  set:x:/@_css-addons?value
    src:" hyper-ide-page-scroll"





/*
 * Adding all "global" plugins.
 */
insert-before:x:/../*/create-widget/**/widgets/=plugins/0/-2
  micro.evaluate.file:@IDE/helpers/get-plugins.hl
    type:hyper-ide.global-plugin





/*
 * Creating main Hyper IDE container.
 */
create-widget:hyper-ide-main-container
  class:container-fullscreen hyper-ide-container{0}
    :x:/@_css-addons?value


  /*
   * Helper Ajax events, necessary to map keyboard shortcuts, among other things.
   */
  .onsave

    /*
     * Saving active editor's content.
     */
    hyper-ide.editors.save-active


  .onclose

    /*
     * Closing active editor.
     */
    hyper-ide.editors.close-active


  .onprevious

    /*
     * Activating "previous editor" in chain of open editors.
     */
    hyper-ide.editors.activate-previous


  .onnext

    /*
     * Activating "next editor" in chain of open editors.
     */
    hyper-ide.editors.activate-next


  events


    /*
     * Returns true if Hyper IDE is open.
     */
    hyper-ide.is-open

      /*
       * Simply returning boolean true to caller, since (obviously) Hyper IDE is open.
       */
      return:bool:true


    /*
     * Pingback event, invoked every n'th minute, to avoid being thrown out of session.
     *
     * This is done to avoid having user thrown out of his session, while editing files,
     * without raising an Ajax request for 20 minutes or more.
     *
     * Basically, it creates an "empty" Ajax request, every 10 minutes, to re-touch
     * the session, to avoid having automatic destruction of session occur after 20
     * minutes of inactivity.
     */
    hyper-ide._pingback

      /*
       * Pingbacking server 10 minutes from now.
       */
      micro.lambda.create-timeout
        milliseconds:600000
        onfinish

          /*
           * Simply creating a new pingback, which will re-touch our session object
           * on the server 10 minutes from now.
           */
          hyper-ide._pingback


    /*
     * Returns the path for the currently selected folder, if any.
     */
    hyper-ide.get-active-folder
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.get-active-folder.hl
      return:x:/-?value


    /*
     * Refreshes the currently active folder, if any.
     */
    hyper-ide.refresh-folder
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.refresh-folder.hl


    /*
     * Returns file paths for all open editors.
     */
    hyper-ide.editors.get-open
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.get-open.hl
      return:x:/-/*


    /*
     * Returns ID for active editor, if any.
     */
    hyper-ide.editors.get-active-id
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.get-active-id.hl
      return:x:/-?value


    /*
     * Returns file path for active editor, if any.
     */
    hyper-ide.editors.get-active
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.get-active.hl
      return:x:/-?value


    /*
     * Sets the active editor.
     *
     * Pass in [_arg] being filename of editor to activate.
     */
    hyper-ide.editors.set-active
      eval-x:x:/+/*
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.set-active.hl
        editor:x:/../*/_arg?value
      return:x:/-?value


    /*
     * Activating previous editor in chain.
     */
    hyper-ide.editors.activate-previous
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.activate-previous.hl
      return:x:/-?value


    /*
     * Activating next editor in chain.
     */
    hyper-ide.editors.activate-next
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.activate-next.hl
      return:x:/-?value


    /*
     * Returns code for currently active editor.
     */
    hyper-ide.editors.get-active-code
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.get-active-code.hl
      return:x:/-?value


    /*
     * Sets code for currently active editor.
     */
    hyper-ide.editors.set-active-code
      eval-x:x:/+/*
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.set-active-code.hl
        code:x:/../*/_arg?value
      return:x:/-?value


    /*
     * Returns code for specified [_arg] editor.
     */
    hyper-ide.editors.get-code
      eval-x:x:/+/*
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.get-code.hl
        editor:x:/../*/_arg?value
      return:x:/-?value


    /*
     * Sets the code for specified [_arg] editor.
     * Pass in new code as [content].
     */
    hyper-ide.editors.set-code
      eval-x:x:/+/*
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.set-code.hl
        editor:x:/../*/_arg?value
        code:x:/../*/content?value


    /*
     * Saves specified [_arg] editor's content.
     */
    hyper-ide.editors.save
      eval-x:x:/+/*
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.save.hl
        editor:x:/../*/_arg?value


    /*
     * Saves active editor's content.
     */
    hyper-ide.editors.save-active
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.save-active.hl
      return:x:/-?value


    /*
     * Removes the "dirty" flag for specified [_arg] editor.
     */
    hyper-ide.editors.set-clean
      eval-x:x:/+/*
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.set-clean.hl
        editor:x:/../*/_arg?value


    /*
     * Adds the "dirty" flag for specified [_arg] editor.
     */
    hyper-ide.editors.set-dirty
      eval-x:x:/+/*
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.set-dirty.hl
        editor:x:/../*/_arg?value


    /*
     * Returns true if current editor is dirty.
     */
    hyper-ide.editors.is-dirty
      eval-x:x:/+/*
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.is-dirty.hl
        editor:x:/../*/_arg?value
      return:x:/-?value


    /*
     * Close active editor.
     */
    hyper-ide.editors.close-active
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.close-active.hl


    /*
     * Close editors.
     *
     * Will close all editors that have filenames starting with the specified [filter] path.
     * If [exact] is boolean "true", it will only delete the editor with the exact name of [filter].
     *
     * Useful for closing multiple editors, such as when a folder is deleted or something, in addition
     * to (of course) closing only a single editor (by setting exact to true).
     */
    hyper-ide.editors.close
      .signal
      add:x:/+
        src:x:/@.signal/--/<-
      micro.evaluate.file:@IDE/helpers/hyper-ide-lambda-events/hyper-ide.editors.close.hl
      return:x:/-?value


  oninit

    /*
     * Starting "pingback loop", to make sure we stay inside of session.
     */
    hyper-ide._pingback

  widgets

    /*
     * Wrapper for our top toolbar and our "header" (which contains the file/folder-path).
     */
    div:hyper-ide-toolbar-wrapper
      class:row
      widgets
        div
          class:col-100
          widgets

            /*
             * Our primary toolbar.
             *
             * Contains login/logout, home button, and "system wide" plugins.
             */
            div
              class:strip right hyper-ide-toolbar
              style:"float:right;"
              widgets

                /*
                 * Home button, launches desktop (or default app).
                 */
                button
                  innerValue:@"<span class=""icon-home3""></span>"
                  title:Close Hyper IDE
                  onclick

                    /*
                     * Making sure we close all editors, and checking if event
                     * returns "false", which implies we have unsaved changes,
                     * and we need to ask user about confirmation before we allow
                     * him to leave page.
                     */
                    hyper-ide.editors.close
                      filter:/
                      .onclosed

                        /*
                         * Redirecting user to server's root URL.
                         */
                        p5.web.get-root-location
                        p5.web.set-location:x:/-?value

            /*
             * Our secondary toolbar.
             *
             * Contains help, settings, close all editors and "global plugins" for Hyper IDE.
             */
            div:hyper-ide-toolbars
              class:strip right hyper-ide-toolbar
              widgets:plugins

                /*
                 * Help button.
                 */
                button
                  innerValue:@"<span class=""icon-question""></span>"
                  title:Help
                  onclick

                    /*
                     * Toggling visibility of help files.
                     */
                    if
                      hyper-ide.help-visible

                      /*
                       * Help already visible, hiding it.
                       */
                      hyper-ide.close-help

                    else

                      /*
                       * Launching help.
                       */
                      micro.evaluate.file:@IDE/helpers/display-help.hl

                    /*
                     * Making sure we toggle toggled state of button.
                     */
                    micro.css.toggle:x:/../*/_event?value
                      class:toggled

                /*
                 * Settings button.
                 */
                button
                  innerValue:@"<span class=""icon-cog""></span>"
                  title:Settings
                  oninit

                    /*
                     * Verifying user is "root", and if not, deleting the settings button,
                     * since it among other things, allows the user to enable and disable modules,
                     * at a global level.
                     */
                    whoami
                    if:x:/-/*/role?value
                      !=:root
                      delete-widget:x:/../*/_event?value

                  onclick

                    /*
                     * Allowing user to modify his settings.
                     */
                    micro.codemirror.settings
                      checkbox
                        info:Browser scroll
                        title:If true, will enable the browser scroll bars when document(s) overflows the size of viewport
                        .data-field:page-scroll
                        oninit

                          /*
                           * Making sure we retrieve existing value.
                           */
                          .defaults
                            page-scroll:bool:false
                          p5.auth.my-settings.get
                          if:x:(/@p5.auth.my-settings.get/*/codemirror/*/page-scroll|/../*/.defaults/*/page-scroll)/$?value
                            =:bool:true
                            set-widget-property:x:/../*/_event?value
                              checked

                /*
                 * Bookmark button.
                 */
                button:hyper-ide-bookmark-button
                  innerValue:@"<span class=""icon-bookmark""></span>"
                  title:Copy URL to current path
                  disabled
                  onclick

                    /*
                     * Shows the URL for the current path to the user.
                     */
                    create-widget:hyper-ide-bookmark-url
                      element:input
                      type:text
                      class:hyper-ide-bookmark-textbox
                      onkeydown:@"if (event.keyCode == 13 || event.keyCode == 27) {p5.$('hyper-ide-bookmark-url').raise('.onclose');return false;}"
                      onblur

                        /*
                         * Simply invoking [.onclose] when widget looses focus.
                         */
                        p5.web.widgets.ajax-events.raise:x:/../*/_event?value
                          .onclose

                      .onclose

                        /*
                         * Deleting widget.
                         */
                        delete-widget:x:/../*/_event?value

                      oninit

                        /*
                         * Figuring out the URL for current path, and selecting all text.
                         */
                        micro.widgets.tree.get-selected-items:hyper-ide-folder-tree-browser
                        p5.web.get-location-url
                        hyper-ide.editors.get-active
                        set-widget-property:x:/../*/_event?value
                          value:{0}?path={1}
                            :x:/@p5.web.get-location-url?value
                            :x:/@micro.widgets.tree.get-selected-items/0/0?name
                        micro.page.set-focus:x:/../*/_event?value

                /*
                 * Close all editors button.
                 */
                button:hyper-ide-close-all-editors
                  innerValue:@"<span class=""icon-cross""></span>"
                  title:Close all editors
                  disabled
                  onclick

                    /*
                     * Making sure we close all editors.
                     */
                    hyper-ide.editors.close
                      filter:/

    /*
     * Wrapper for actual content.
     *
     * This is where our editors are put, and our "solution explorer" tree view, 
     * among other things.
     */
    div:hyper-ide-content-wrapper
      class:row hyper-ide-content
      widgets

        /*
         * Wrapper for our file browser, or our "solution explorer" if you wish.
         */
        div:hyper-ide-file-browser-wrapper
          class:col-30 hyper-ide-solution-explorer-col
          widgets
            container
              class:air-inner shaded rounded hyper-ide-solution-explorer
              widgets

                /*
                 * Our TreeView that actually allows the user to browse 
                 * files on his server.
                 */
                micro.widgets.tree:hyper-ide-folder-tree-browser
                  class:micro-widgets-tree hyper-ide-tree-view
                  items
                    /:/

                  oninit

                    /*
                     * Expanding root item.
                     */
                    micro.widgets.tree.toggle-items:hyper-ide-folder-tree-browser
                      items
                        /

                  /*
                   * Callback invoked when TreeView wants more items.
                   */
                  .onexpand

                    /*
                     * Making sure we wrap our stuff inside of a try/catch block,
                     * since this will prevent the default exception handler from
                     * being evaluated, in case user tries to access file objects
                     * he does not have permission to access.
                     */
                    try

                      /*
                       * We need to track whether or not an exception occurs, from
                       * our [.onexpand], and into our [.onselect]. We do this by setting
                       * a "signal" viewstate value if an exception occurs.
                       *
                       * However, we need to default its value to empty, in case
                       * no exception occurs.
                       */
                      p5.web.viewstate.set:hyper-ide.no-select

                      /*
                       * Checking if this is a request for a folder.
                       */
                      if
                        ends-with:x:/../*/_item-id?value
                          src:/

                        /*
                         * Invoking file responsible for actually retrieving files
                         * and folders structure, and returning items to caller.
                         */
                        eval-x:x:/+/*
                        micro.evaluate.file:@IDE/helpers/get-file-objects.hl
                          folder:x:/../*/_item-id?value
                        add:x:/..if/*/return/*/items
                          src:x:/@micro.evaluate.file/*
                        return
                          items

                    catch

                      /*
                       * Giving user some feedback, and making sure we delete any
                       * additional toolbars that was created.
                       */
                      micro.windows.info:x:/@message?value
                        class:micro-windows-info warning
                      if
                        fetch:x:/0/0?value
                          widget-exists:hyper-ide-active-file-object-toolbar
                        delete-widget:hyper-ide-active-file-object-toolbar

                      /*
                       * Making sure we don't try to select item in any ways 
                       * further down in file.
                       */
                      p5.web.viewstate.set:hyper-ide.no-select
                        src:bool:true

                  /*
                   * Callback invoked when an item ise selected.
                   */
                  .onselect

                    /*
                     * Checking if we had an exception while invoking our [.onexpand],
                     * at which point we don't evaluate this lambda.
                     */
                    p5.web.viewstate.get:hyper-ide.no-select
                    if:x:/-/*?value

                      /*
                       * Re-setting exception signal and returning early.
                       */
                      p5.web.viewstate.set:hyper-ide.no-select
                      return

                    /*
                     * Making sure we wrap our stuff inside of a try/catch block,
                     * since this will prevent the default exception handler from
                     * being evaluated, in case user tries to access file objects
                     * he does not have permission to access.
                     */
                    try

                      /*
                       * Checking if this is a de-select invocation.
                       */
                      if:x:/../*/items/*?count
                        =:int:0

                        /*
                         * De-select invocation.
                         */
                        return

                      /*
                       * Checking if this is a request for a folder or a file.
                       */
                      if
                        ends-with:x:/../*/items/0?name
                          src:/

                        /*
                         * Request for folder.
                         *
                         * Invoking file responsible for selecting the folder.
                         */
                        eval-x:x:/+/*
                        micro.evaluate.file:@IDE/helpers/select-folder.hl
                          folder:x:/../*/items/0?name

                      else

                        /*
                         * Request for file.
                         *
                         * Invoking file responsible for selecting the file.
                         */
                        eval-x:x:/+/*
                        micro.evaluate.file:@IDE/helpers/edit-file.hl
                          file:x:/../*/items/0?name

                      /*
                       * Making sure we enable our "bookmark button".
                       */
                      delete-widget-property:hyper-ide-bookmark-button
                        disabled

                    catch

                      /*
                       * Giving user some feedback, and making sure we delete any
                       * additional toolbars that was created.
                       */
                      micro.windows.info:x:/@message?value
                        class:micro-windows-info warning
                      if
                        fetch:x:/0/0?value
                          widget-exists:hyper-ide-active-file-object-toolbar
                        delete-widget:hyper-ide-active-file-object-toolbar

                      /*
                       * Returning false to let caller know we don't want to invoke
                       * our [.onexpand] lambda callback.
                       */
                      return:bool:false

        /*
         * Wrapper for our file editor.
         *
         * This is where our actual CodeMirror file editors' ends up.
         * In addition to our "splash screen".
         */
        container:hyper-ide-file-editor
          class:col-70 hyper-ide-editor-col
          events


            /*
             * Loads up "splash screen".
             */
            hyper-ide.load-splash

              /*
               * Creating our initial "splash" screen.
               */
              load-file:@IDE/helpers/splash.hl
              add:x:/@load-file/*/*
                src
                  parent:hyper-ide-file-editor
              add:x:/../*/create-widgets
                src:x:/@load-file/*/*
              create-widgets

              /*
               * Making sure we disable our "Close all editors" button.
               */
              set-widget-property:hyper-ide-close-all-editors
                disabled


          oninit

            /*
             * Creating initial "splash" screen.
             */
            hyper-ide.load-splash





/*
 * Checking if client requested to open a specific file or path initially,
 * and if so, invoking file responsible for doing just that.
 */
p5.web.query.get:path
if:x:/@p5.web.query.get/*?value
  eval-x:x:/+/*
  micro.evaluate.file:@IDE/helpers/open-path.hl
    path:x:/@p5.web.query.get/*?value
