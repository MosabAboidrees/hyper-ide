/*
 * File responsible for starting app.
 *
 * This file is evaluated when the user clicks the desktop icon.
 */





/*
 * Figuring out skin to use, and other settings.
 */
.defaults
  skin:serious
select-data:x:/*/*/micro.codemirror.settings





/*
 * Including Micro, active skin, font CSS file, and main CSS file for Hyper IDE.
 */
p5.web.include-css-file
  @MICRO/media/main.css
  @MICRO/media/fonts.css
p5.web.include-css-file:@MICRO/media/skins/{0}.css
  :x:(/@select-data/*/*/skin|/../*/.defaults/*/skin)/$?value
p5.web.include-css-file:@IDE/media/main.css





/*
 * Verifying user is logged in as root, and if not, 
 * forcing the user to login before we proceed.
 */
whoami
if:x:/@whoami/*/role?value
  !=:root

  /*
   * User is not logged in as root.
   */
  p5.core.login
    message:You'll need to login with a root account to access this module

  /*
   * Returning early to abort evaluating the rest of our file.
   */
  return





/*
 * Setting title of our page.
 */
p5.web.page.set-title:Hyper IDE





/*
 * Creating main container.
 */
create-widget:hyper-ide-main-container
  class:container-fullscreen
  events


    /*
     * Pingback event, invoked every n'th minute, to avoid being thrown out of session.
     *
     * This is done to avoid having user thrown out of his session, while editing files,
     * without raising an Ajax request for 20 minutes or more.
     *
     * Basically, it creates an "empty" Ajax request, every 10 minutes, to touch the session,
     * to avoid having automatic destruction of session occur.
     */
    hyper-ide.pingback

      /*
       * Pingbacking server 10 minutes from now.
       */
      micro.lambda.create-timeout
        milliseconds:600000
        onfinish
          hyper-ide.pingback


    /*
     * Close editors.
     *
     * Will close all editors that have filenames starting with the specified [filter] path.
     * If [exact] is boolean "true", it will only delete the editor with the exact name of [filter].
     */
    hyper-ide.close-editors

      /*
       * Sanity checking arguments.
       */
      micro.lambda.contract.min:x:/..
        filter:string
      micro.lambda.contract.optional:x:/..
        exact:bool

      /*
       * Finding all "activate" buttons for all editors, and getting their filenames,
       * such that we can check if they are starting with the specified [filter] path.
       */
      p5.web.widgets.find
        .activate
      get-widget-property:x:/@p5.web.widgets.find/*/*?value
        .activate

      /*
       * Looping through all activate buttons, checking if their
       * associated files are beneath the folder we just deleted.
       * And if so, making sure we delete the activate button.
       */
      for-each:x:/@get-widget-property/*/*

        /*
         * Checking if currently iterated "activate" button's file
         * is beneath the folder we just deleted.
         */
        if
          starts-with:x:/@_dp/#?value
            src:x:/../*/filter?value

          /*
           * Checking if [exact] was true, at which point the filename must
           * be an exact match, and we do not delete editor instance.
           */
          if:x:/../*/exact?value
            =:bool:true
            and:x:/@_dp/#?value
              !=:x:/../*/filter?value

            /*
             * Not an exact match.
             */
            continue

          /*
           * Deleting activate button
           */
          delete-widget:x:/@_dp/#/.?name

          /*
           * Deleting editor.
           */
          p5.web.widgets.find
            .editor:x:/@_dp/#?value
          delete-widget:x:/-/*/*?value

          /*
           * Deleting toolbar.
           */
          p5.web.widgets.find
            .toolbar:x:/@_dp/#?value
          delete-widget:x:/-/*/*?value

      /*
       * Checking if currently active editor was closed by above logic, at which
       * case we'll either need to set the next available editor to active, or if
       * there are none, load our splash screen.
       */
      p5.web.widgets.find
        .editor:x:/../*/filter?value
        visible:true
      if:x:/@p5.web.widgets.find/*/*?value
        not

        /*
         * Currently edited file was closed.
         *
         * Open last available file for editing, by making sure we activate
         * the item associated with the last available "activate" widget
         * in out treeview.
         */
        p5.web.widgets.find
          .activate:x:/../*/filter?value
        get-widget-property:x:/@p5.web.widgets.find/*/0/-?value
          .activate
        add:x:/./*/micro.widgets.tree.select-items/*
          src:x:/@get-widget-property/*/*?value
        micro.widgets.tree.select-items:hyper-ide-folder-tree-browser
          items

        else-if:x:/../*/p5.web.widgets.find/[0,1]/*/*

          /*
           * No more available editors, but there were available editors during 
           * initial invocation of our event, hence deleting editor wrapper,
           * and launching "splash" screen.
           */
          delete-widget:hyper-ide-editor-tab
          hyper-ide.load-splash

          /*
           * Making sure we un-select all tree view items.
           */
          micro.widgets.tree.select-items:hyper-ide-folder-tree-browser
            items

          /*
           * Making sure we display solution explorer, in case user made it invisible.
           */
          micro.css.delete:hyper-ide-file-browser-wrapper
            class:hide
          micro.css.delete:hyper-ide-file-editor
            class:col
          micro.css.add:hyper-ide-file-editor
            class:col-70

      else-if:x:/@p5.web.widgets.find/*/*?value

        /*
         * Currently edited file was not closed, making sure we select it
         * in our tree view.
         */
        add:x:/./*/micro.widgets.tree.select-items/*
          src:x:/@hyper-ide.get-filename?value
        micro.widgets.tree.select-items:hyper-ide-folder-tree-browser
          items

      else

        /*
         * No editor open, deleting any potentially existing file object toolbars,
         * and re-setting header.
         */
        p5.web.widgets.find
          .toolbar:x:/@_dp/#?value
        delete-widget:x:/-/*/*?value


  oninit

    /*
     * Starting "pingback loop", to make sure we stay inside of session.
     */
    hyper-ide.pingback

  widgets

    /*
     * Wrapper for our top toolbar and our "header" (which contains the file/folder-path).
     */
    div:hyper-ide-toolbar-wrapper
      class:row
      widgets
        div
          class:col-100
          widgets

            /*
             * Our primary toolbar.
             *
             * Contains settings and home button.
             */
            div
              class:right
              widgets
                div:hyper-ide-main-toolbar
                  class:strip toolbar hyper-ide-toolbar
                  widgets

                    /*
                     * Settings button.
                     */
                    button
                      innerValue:@"<span class=""icon-cog""></span>"
                      title:Settings
                      style:"margin-bottom:0;"
                      onclick

                        /*
                         * Showing settings for CM to user.
                         */
                        micro.codemirror.settings

                    /*
                     * Home button, launches desktop (or default app).
                     */
                    button
                      innerValue:@"<span class=""icon-home3""></span>"
                      title:Close Hypereval
                      style:"margin-bottom:0;"
                      onclick

                        /*
                         * Redirecting user to server's root URL.
                         */
                        p5.web.get-root-location
                        p5.web.set-location:x:/-?value

    /*
     * Wrapper for actual content.
     *
     * This is where our editors are put, and our "solution explorer" tree view, 
     * among other things.
     */
    div:hyper-ide-content-wrapper
      class:row hyper-ide-content
      widgets

        /*
         * Wrapper for our file browser, or our "solution explorer" if you wish.
         */
        div:hyper-ide-file-browser-wrapper
          class:col-30 air-top hyper-ide-solution-explorer-col
          widgets
            container
              class:air-inner shaded rounded hyper-ide-solution-explorer
              widgets

                /*
                 * Our TreeView that actually allows the user to browse 
                 * files on his server.
                 */
                micro.widgets.tree:hyper-ide-folder-tree-browser
                  class:micro-tree hyper-ide-tree-view
                  items
                    /:/

                  oninit

                    /*
                     * Expanding root item.
                     */
                    micro.widgets.tree.toggle-items:hyper-ide-folder-tree-browser
                      items
                        /

                  /*
                   * Callback invoked when TreeView wants more items.
                   */
                  .onexpand

                    /*
                     * Checking if this is a request for a folder.
                     */
                    if
                      ends-with:x:/../*/_item-id?value
                        src:/

                      /*
                       * Invoking file responsible for actually retrieving files
                       * and folders structure, and returning items to caller.
                       */
                      eval-x:x:/+/*
                      micro.evaluate.file:@IDE/helpers/get-file-objects.hl
                        folder:x:/../*/_item-id?value
                      add:x:/..if/*/return/*/items
                        src:x:/@micro.evaluate.file/*
                      return
                        items

                  /*
                   * Callback invoked when an item ise selected.
                   */
                  .onselect

                    /*
                     * Checking if this is a de-select invocation.
                     */
                    if:x:/../*/items/*?count
                      =:int:0

                      /*
                       * De-select invocation.
                       */
                      return

                    /*
                     * Checking if this is a request for a folder or a file.
                     */
                    if
                      ends-with:x:/../*/items/0?name
                        src:/

                      /*
                       * Request for folder.
                       *
                       * Invoking file responsible for selecting the folder.
                       */
                      eval-x:x:/+/*
                      micro.evaluate.file:@IDE/helpers/select-folder.hl
                        folder:x:/../*/items/0?name

                    else

                      /*
                       * Request for file.
                       *
                       * Invoking file responsible for selecting the file.
                       */
                      eval-x:x:/+/*
                      micro.evaluate.file:@IDE/helpers/select-file.hl
                        file:x:/../*/items/0?name

        /*
         * Wrapper for our file editor.
         *
         * This is where our actual CodeMirror file editors' ends up.
         * In addition to our "splash screen".
         */
        container:hyper-ide-file-editor
          class:col-70 air-top hyper-ide-editor-col
          events


            /*
             * Loads up "splash screen".
             */
            hyper-ide.load-splash

              /*
               * Creating our initial "splash" screen.
               */
              load-file:@IDE/helpers/splash.hl
              add:x:/@load-file/*/*
                src
                  parent:hyper-ide-file-editor
              add:x:/../*/create-widgets
                src:x:/@load-file/*/*
              create-widgets


          oninit

            /*
             * Creating initial "splash" screen.
             */
            hyper-ide.load-splash
