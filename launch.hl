
/*
 * File responsible for starting Hyper IDE.
 */





/*
 * Checking if Hyper IDE has already been launched, at which point we
 * warn user and return early.
 */
if
  hyper-ide.is-open
  micro.windows.info:Hyper IDE is already open
    class:micro-windows-info warning
  return





/*
 * Retrieving user's settings, which we need to retrieve in order to determine
 * how to render Hyper IDE.
 */
.defaults
  page-scroll:bool:false
p5.auth.my-settings.get






/*
 * Including Micro CSS.
 */
micro.css.include





/*
 * Including Hyper IDE's CSS file, making sure we can refresh cache on client,
 * every time we create a new release, to avoid having "old CSS files" 'hanging'
 * in browser cache.
 *
 * We do this by applying an HTTP query parameter to our CSS inclusion element on
 * the client.
 */
hyper-ide.version
p5.web.include-css-file:@IDE/media/main.css?v={0}
  :x:/@hyper-ide.version?value





/*
 * Setting title of our page, making sure we display version number of Hyper IDE.
 */
p5.web.page.set-title:Hyper IDE version {0}
  :x:/@hyper-ide.version?value





/*
 * Checking if we should use page scrolling or not, and if so, making sure we
 * change Hyper IDE's root element's CSS class accordingly.
 */
_css-addons
if:x:(/@p5.auth.my-settings.get/*/codemirror/*/page-scroll|/@.defaults/*/page-scroll)/$?value
  =:bool:true

  /*
   * User has configured Hyper IDE to use "page scroll".
   *
   * This implies that the CodeMirror editors and the folder browser will always render
   * themselves in "auto height", not using scrollbars on their actual widgets,
   * which might make sense for some users - Especially if they're using a tablet or
   * a phone as their client.
   */
  set:x:/@_css-addons?value
    src:" hyper-ide-page-scroll"





/*
 * Adding all "global" plugins.
 */
add:x:/../*/create-widget/**/widgets/=plugins
  micro.evaluate.file:@IDE/helpers/get-plugins.hl
    type:hyper-ide.global-plugin





/*
 * Creating main Hyper IDE container widget.
 */
create-widget:hyper-ide-main-container
  class:container-fullscreen hyper-ide-container{0}
    :x:/@_css-addons?value


  /*
   * Helper Ajax events, necessary to map keyboard shortcuts.
   */
  .onsave

    /*
     * Saving active editor's content.
     */
    hyper-ide.editors.save-active-editor


  .onclose

    /*
     * Closing active editor.
     */
    hyper-ide.editors.close-active-editor


  .onprevious

    /*
     * Activating "previous editor" in chain of open editors.
     */
    hyper-ide.editors.activate-previous-editor


  .onnext

    /*
     * Activating "next editor" in chain of open editors.
     */
    hyper-ide.editors.activate-next-editor


  events


    /*
     * Returns true if Hyper IDE is open.
     */
    hyper-ide.is-open

      /*
       * Simply returning boolean true to caller, since (obviously) Hyper IDE is open.
       */
      return:bool:true


    /*
     * Pingback event, invoked every n'th minute, to avoid being thrown out of session.
     *
     * This is done to avoid having user thrown out of his session, while editing files,
     * without raising an Ajax request for 20 minutes or more.
     *
     * Basically, it creates an "empty" Ajax request, every 10 minutes, to re-touch
     * the session, to avoid having automatic destruction of session occur after 20
     * minutes of inactivity.
     */
    hyper-ide._pingback-session-keep-alive

      /*
       * Pingbacking server 10 minutes from now.
       */
      micro.lambda.create-timeout
        milliseconds:600000
        onfinish

          /*
           * Simply creating a new pingback, which will re-touch our session object
           * on the server 10 minutes from now.
           */
          hyper-ide._pingback-session-keep-alive


    /*
     * Returns the path for the currently selected item, if any.
     */
    hyper-ide.folder-explorer.get-active-item

      /*
       * Returning treeview's selected item.
       */
      micro.widgets.tree.get-selected-items:hyper-ide-folder-tree-browser
      return:x:/@micro.widgets.tree.get-selected-items/*/*?name


    /*
     * Refreshes the currently active folder, if any.
     */
    hyper-ide.folder-explorer.refresh-active-folder
      micro.evaluate.file:@IDE/helpers/lambda-events/hyper-ide.folder-explorer.refresh-active-folder.hl
      return:x:/-?value


    /*
     * Returns file paths for all open editors.
     */
    hyper-ide.editors.get-open-editors
      micro.evaluate.file:@IDE/helpers/lambda-events/hyper-ide.editors.get-open-editors.hl
      return:x:/-/*


    /*
     * Returns ID for active editor, if any.
     */
    hyper-ide.editors.get-active-editor-id
      micro.evaluate.file:@IDE/helpers/lambda-events/hyper-ide.editors.get-active-editor-id.hl
      return:x:/-?value


    /*
     * Returns file path for active editor, if any.
     */
    hyper-ide.editors.get-active-editor-filepath
      micro.evaluate.file:@IDE/helpers/lambda-events/hyper-ide.editors.get-active-editor-filepath.hl
      return:x:/-?value


    /*
     * Sets the active editor.
     *
     * Pass in [_arg] being either filename or ID of editor to activate.
     */
    hyper-ide.editors.set-active-editor
      eval-x:x:/+/*
      micro.evaluate.file:@IDE/helpers/lambda-events/hyper-ide.editors.set-active-editor.hl
        editor:x:/../*/_arg?value
      return:x:/-?value


    /*
     * Activating previous editor in chain.
     */
    hyper-ide.editors.activate-previous-editor
      micro.evaluate.file:@IDE/helpers/lambda-events/hyper-ide.editors.activate-previous-editor.hl
      return:x:/-?value


    /*
     * Activating next editor in chain.
     */
    hyper-ide.editors.activate-next-editor
      micro.evaluate.file:@IDE/helpers/lambda-events/hyper-ide.editors.activate-next-editor.hl
      return:x:/-?value


    /*
     * Returns code for currently active editor.
     */
    hyper-ide.editors.get-active-editor-code
      micro.evaluate.file:@IDE/helpers/lambda-events/hyper-ide.editors.get-active-editor-code.hl
      return:x:/-?value


    /*
     * Sets code for currently active editor.
     */
    hyper-ide.editors.set-active-editor-code
      eval-x:x:/+/*
      micro.evaluate.file:@IDE/helpers/lambda-events/hyper-ide.editors.set-active-editor-code.hl
        code:x:/../*/_arg?value
      return:x:/-?value


    /*
     * Saves active editor's content.
     */
    hyper-ide.editors.save-active-editor
      micro.evaluate.file:@IDE/helpers/lambda-events/hyper-ide.editors.save-active-editor.hl
      return:x:/-?value


    /*
     * Removes the "dirty" flag for active editor.
     */
    hyper-ide.editors.set-active-editor-clean-flag
      micro.evaluate.file:@IDE/helpers/lambda-events/hyper-ide.editors.set-active-editor-clean-flag.hl


    /*
     * Adds the "dirty" flag for specified [_arg] editor.
     */
    hyper-ide.editors.set-active-editor-dirty-flag
      micro.evaluate.file:@IDE/helpers/lambda-events/hyper-ide.editors.set-active-editor-dirty-flag.hl


    /*
     * Returns true if current editor is dirty.
     */
    hyper-ide.editors.get-active-editor-is-dirty
      micro.evaluate.file:@IDE/helpers/lambda-events/hyper-ide.editors.get-active-editor-is-dirty.hl
      return:x:/-?value


    /*
     * Returns true if [_arg] editor is dirty.
     * [_arg] canbe either editor ID or filepath.
     */
    hyper-ide.editors.get-editor-is-dirty
      eval-x:x:/+/*
      micro.evaluate.file:@IDE/helpers/lambda-events/hyper-ide.editors.get-editor-is-dirty.hl
        editor:x:/../*/_arg?value
      return:x:/-?value


    /*
     * Close active editor.
     */
    hyper-ide.editors.close-active-editor
      micro.evaluate.file:@IDE/helpers/lambda-events/hyper-ide.editors.close-active-editor.hl


    /*
     * Close editors.
     *
     * Will close all editors that have filenames starting with the specified [filter] path.
     * If [exact] is boolean "true", it will only delete the editor with the exact name of [filter].
     * The default value for [filter] if not provided is "/", implying all editors will be closed.
     *
     * Useful for closing multiple editors, such as when a folder is deleted or something, in addition
     * to (of course) closing only a single editor (by setting exact to true).
     *
     * Notice, if one of your open editors have unsaved changes, the user will be warned, and
     * asked if he wants to save his changes (or not).
     */
    hyper-ide.editors.close-all
      .signal
      add:x:/+
        src:x:/@.signal/--/<-
      micro.evaluate.file:@IDE/helpers/lambda-events/hyper-ide.editors.close-all.hl
      return:x:/-?value


  oninit

    /*
     * Starting "pingback loop", to make sure we stay inside of session.
     */
    hyper-ide._pingback-session-keep-alive

  widgets

    /*
     * Wrapper for all toolbars.
     */
    div:hyper-ide-toolbar-wrapper
      class:row
      widgets
        div
          class:col-100
          widgets

            /*
             * Our primary toolbar.
             *
             * Contains home button, and system wide (Phosphorus Five) global
             * plugins.
             */
            micro.widgets.file
              class:strip right hyper-ide-toolbar
              folder:@IDE/helpers/toolbars/main-toolbar/

            /*
             * Our secondary toolbar.
             *
             * Contains help button, settings button, close all editors button,
             * and "global plugins" for Hyper IDE.
             */
            micro.widgets.file:hyper-ide-toolbars
              class:strip right hyper-ide-toolbar
              folder:@IDE/helpers/toolbars/secondary-toolbar/
              widgets:plugins



    /*
     * Wrapper for actual content.
     *
     * This is where our editors and our folder explorer tree view can be found.
     */
    div:hyper-ide-content-wrapper
      class:row hyper-ide-content
      widgets

        /*
         * Wrapper for our folder explorer.
         */
        div:hyper-ide-file-browser-wrapper
          class:col-30 hyper-ide-solution-explorer-col
          widgets

            /*
             * Our actual folder explorer
             */
            micro.widgets.file
              class:air-inner shaded rounded hyper-ide-solution-explorer
              files
                @IDE/helpers/folder-explorer.hl

        /*
         * Wrapper for our file editor.
         *
         * This is where our actual CodeMirror file editors' ends up.
         * In addition to our "splash screen".
         */
        container:hyper-ide-file-editor
          class:col-70 hyper-ide-editor-col
          events


            /*
             * Loads up "splash screen".
             */
            hyper-ide.load-splash

              /*
               * Creating our initial "splash" screen.
               */
              load-file:@IDE/helpers/splash.hl
              add:x:/@load-file/*/*
                src
                  parent:hyper-ide-file-editor
              add:x:/../*/create-widgets
                src:x:/@load-file/*/*
              create-widgets

              /*
               * Making sure we disable our "Close all editors" button.
               */
              set-widget-property:hyper-ide-close-all-editors
                disabled


          oninit

            /*
             * Creating initial "splash" screen.
             */
            hyper-ide.load-splash





/*
 * Checking if client requested to open a specific file or path initially,
 * and if so, invoking file responsible for doing just that.
 */
p5.web.query.get:path
if:x:/@p5.web.query.get/*?value
  eval-x:x:/+/*
  micro.evaluate.file:@IDE/helpers/open-path.hl
    path:x:/@p5.web.query.get/*?value
