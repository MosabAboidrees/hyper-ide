/*
 * Edits the specified [file], using some sort of CodeMirror editor, or whatever
 * is available.
 */





/*
 * Sanity checking arguments.
 */
micro.lambda.contract.min:x:/..
  file:string





/*
 * Deleting any previously created edit active file object toolbars.
 */
if
  fetch:x:/0/0?value
    widget-exists:hyper-ide-active-file-object-toolbar

  /*
   * A folder is currently edited, deleting active file object toolbar for
   * the folder that is edited.
   */
  delete-widget:hyper-ide-active-file-object-toolbar





/*
 * Checking if file is already open, at which point we reuse existing editor, to
 * avoid reloading file, and loosing any potential changes.
 */
p5.web.widgets.find:hyper-ide-editor-tab-buttons
  .activate:x:/../*/file?value
if:x:/@p5.web.widgets.find/*/*?value

  /*
   * File is already open, activating editor, and returning early.
   *
   * First making sure correct tab control button becomes toggled.
   * This is done by making sure we remove the "toggled" class from all
   * activate buttons, except the one caller is trying to activate.
   *
   * First finding all activate buttons.
   */
  p5.web.widgets.find:hyper-ide-editor-tab-buttons
    .activate

  /*
   * Then removing the one caller is trying to activate from our above invocation.
   */
  set:x:@"/@p5.web.widgets.find/*/*/""={0}"""
    :x:/../*/p5.web.widgets.find/[0,1]/*/*?value

  /*
   * Then deleting the "toggled" CSS class from all editors in above list.
   */
  micro.css.delete:x:/@p5.web.widgets.find/*/*?value
    class:toggled

  /*
   * Then adding the "toggled" class to the activate button caller is activating.
   */
  micro.css.add:x:/../*/p5.web.widgets.find/[0,1]/*/*?value
    class:toggled

  /*
   * Then making sure correct editor becomes visible.
   *
   * Notice, we'll need to make all editors' here invisible, except the one caller
   * is trying to activate. Hence, first we find editor user is trying to activate.
   */
  p5.web.widgets.find:hyper-ide-editor-tab-editors
    .editor:x:/../*/file?value

  /*
   * Then finding all editors.
   */
  p5.web.widgets.find:hyper-ide-editor-tab-editors
    .editor

  /*
   * Then removing the editor user is trying to activate from list of all editors
   * that we retrieved above.
   */
  set:x:@"/@p5.web.widgets.find/*/*/""={0}"""
    :x:/@p5.web.widgets.find/@p5.web.widgets.find/*/*?value

  /*
   * Making all editors invisible, except the one caller is trying to make visible.
   */
  micro.css.add:x:/@p5.web.widgets.find/*/*?value
    class:hide

  /*
   * Then making the editor caller is trying to show become visible.
   *
   * But first we must make sure the editor actually exists.
   */
  micro.css.delete:x:/@p5.web.widgets.find/@p5.web.widgets.find/*/*?value
    class:hide

  /*
   * Then making sure we disable all editors, except the one caller wants activate,
   * which we enable.
   */
  p5.web.widgets.find:x:/@p5.web.widgets.find/*/*?value
    element:textarea
  if:x:/-/*/*?value
    set-widget-property:x:/@p5.web.widgets.find/*/*?value
      disabled
  p5.web.widgets.find:x:/@p5.web.widgets.find/@p5.web.widgets.find/@p5.web.widgets.find/*/*?value
    element:textarea
  if:x:/-/*/*?value
    delete-widget-property:x:/@p5.web.widgets.find/*/*?value
      disabled

    /*
     * Making sure we give focus to recently shown CodeMirror instance.
     */
    p5.web.send-javascript:@"p5['{0}'].focus();"
      :x:/@p5.web.widgets.find/*/*?value

  /*
   * Then making sure correct toolbar becomes visible.
   *
   * First finding toolbar we should show.
   */
  p5.web.widgets.find
    .toolbar:x:/../*/file?value

  /*
   * Then finding all toolbars.
   */
  p5.web.widgets.find
    .toolbar

  /*
   * Then removing the toolbar user is trying to activate from list of all editors
   * that we retrieved above.
   */
  set:x:@"/@p5.web.widgets.find/*/*/""={0}"""
    :x:/@p5.web.widgets.find/@p5.web.widgets.find/*/*?value

  /*
   * Making all toolbars invisible, except the one caller is trying to make visible.
   */
  micro.css.add:x:/@p5.web.widgets.find/*/*?value
    class:hide

  /*
   * Then making the toolbar caller is trying to show become visible.
   */
  micro.css.delete:x:/@p5.web.widgets.find/@p5.web.widgets.find/*/*?value
    class:hide

  /*
   * Returning early to abort evaluation of the rest of our lambda (file).
   */
  return





/*
 * Retrieving file extension of file, and its filename.
 */
split:x:/../*/file?value
  =:/
split:x:/-/0/-?name
  =:.





/*
 * Retrieving editor for file type, according to file's extension, making sure we
 * pass in file's content.
 *
 * First checking if a specialised editor exists.
 */
.editor-instance
if:x:/@split/*?count
  >:int:1
  and
    fetch:x:/0/0?value
      file-exists:@IDE/helpers/editors/{0}.hl
        :x:/@split/0/-?name

  /*
   * Loading file, such that we can pass its content into our editor instance.
   *
   * Making sure we do not convert the file.
   */
  load-file:x:/../*/file?value
    convert:false

  /*
   * Specialised editor exists, loading it by evaluating its file, and adding
   * the returned arguments into above [.editor-instance] lambda.
   */
  eval-x:x:/+/*/*/content
  add:x:/@.editor-instance
    micro.evaluate.file:@IDE/helpers/editors/{0}.hl
      :x:/@split/0/-?name
      content:x:/@load-file/*?value

else

  /*
   * Trying to use one of the standard CodeMirror editors.
   *
   * First loading file extension to CM mode mapping file.
   * This file contains a bunch of file extensions, that are "mapped" towards
   * CodeMirror modes.
   *
   * Hence, we load the file, do a loopkup for our file extension, at which point
   * we end up with a CodeMirror mode.
   */
  load-file:@IDE/configuration/extension2cm-instance.hl

  /*
   * Checking if specified mode exists.
   */
  if:x:/@load-file/*/*/{0}
    :x:/@split/0/-?name

    /*
     * Loading file, such that we can pass its content into our editor instance.
     *
     * Making sure we do not convert the file.
     */
    load-file:x:/../*/file?value
      convert:false

    /*
     * CodeMirror mode for file's extension exists.
     */
    eval-x:x:/+/*/*/*
    add:x:/@.editor-instance
      src
        micro.widgets.codemirror
          .data-field:content
          mode:x:/@load-file/@load-file/*/*/{0}?value
            :x:/@split/0/-?name
          value:x:/@load-file/*?value
          auto-focus:true
          .keys
            Alt-S:@"p5.$('hyper-ide-main-container').raise('.onsave');"
            Alt-X:@"p5.$('hyper-ide-main-container').raise('.onclose');"
            Alt-W:@"p5.$('hyper-ide-main-container').raise('.onnext');"
            Alt-Q:@"p5.$('hyper-ide-main-container').raise('.onprevious');"

  else

    /*
     * No editor exists, returning early, warning user first
     */
    add:x:/../*/create-widgets/**/.save-button/.
      src:disabled
    add:x:/@.editor-instance
      src
        div
          class:micro-codemirror-wrapper air-inner
          style:"border:solid 1px #e0e0e0;background:#ffffff;margin-top:-1px;position:relative;"
          .not-loaded
          widgets
            h3
              innerValue:Unknown file type
            p
              innerValue:@"This file does not have a default mapping for an editor type in Hyper IDE. If you wish, we could try to still load your file, 
assuming it is a text file of some sort, using the markdown editor? Notice, you can still rename the file, delete it, and so on, without loading it up into your editor.
You can edit the file <em>'/hyper-ide/configuration/extension2cm-instance.hl'</em> to associate file extensions with CodeMirror modes."
            div
              style:"position:absolute;bottom:0;right:0;margin-right:2rem;"
              widgets
                button
                  innerValue:Load file
                  style:"padding-left:35px;padding-right:35px;"
                  onclick

                    /*
                     * Enabling save button.
                     */
                    p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                      .editor
                    get-widget-property:x:/-/*/*?value
                      .editor
                    p5.web.widgets.find
                      .save-button:x:/@get-widget-property/*/*?value
                      disabled
                    delete-widget-property:x:/-/*/*?value
                      disabled

                    /*
                     * Deleting this warning.
                     */
                    p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                      .not-loaded
                    p5.web.widgets.get-parent:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                    delete-widget:x:/@p5.web.widgets.find-first-ancestor/*/*?value

                    /*
                     * Loading our file, and creating our editor instance.
                     */
                    load-file:x:/../*/get-widget-property/[0,1]/*/*?value
                      convert:false
                    create-widgets
                      micro.widgets.codemirror
                        parent:x:/@p5.web.widgets.get-parent/*/*?value
                        .data-field:content
                        mode:markdown
                        value:x:/@load-file/*?value
                        auto-focus:true
                        .keys
                          Alt-S:@"p5.$('hyper-ide-main-container').raise('.onsave');"
                          Alt-X:@"p5.$('hyper-ide-main-container').raise('.onclose');"
                          Alt-W:@"p5.$('hyper-ide-main-container').raise('.onnext');"
                          Alt-Q:@"p5.$('hyper-ide-main-container').raise('.onprevious');"





/*
 * Checking if splash screen is open, and closing it if it is.
 */
if
  fetch:x:/0/0?value
    widget-exists:hyper-ide-splash
  delete-widget:hyper-ide-splash





/*
 * Making sure our "tab control" exists.
 *
 * These widgets will "wrap" all of our editors.
 */
if
  fetch:x:/0/0?value
    widget-exists:hyper-ide-editor-tab
  not

  /*
   * Creating our "tab control" wrapper.
   */
  create-widget:hyper-ide-editor-tab
    parent:hyper-ide-file-editor
    class:hyper-ide-editor-tab
    widgets
      container:hyper-ide-editor-tab-buttons
        class:hyper-ide-editor-tab-buttons
      container:hyper-ide-editor-tab-editors
        class:hyper-ide-editor-tab-content shaded rounded





/*
 * Making sure we hide any previously created file toolbars.
 *
 * This is the toolbar that contains "Save" button, "Close" button, and plugin
 * buttons, etc.
 */
p5.web.widgets.find
  .toolbar
micro.css.add:x:/@p5.web.widgets.find/*/*?value
  class:hide





/*
 * Making sure we hide any previously created editors.
 */
p5.web.widgets.find:hyper-ide-file-editor
  .editor
micro.css.add:x:/@p5.web.widgets.find/*/*?value
  class:hide





/*
 * Notice, to prevent editor's content being serialised back from client upon
 * consecutive Ajax requests, we disable the editor's textarea
 */
p5.web.widgets.find:x:/@p5.web.widgets.find/*/*?value
  element:textarea
set-widget-property:x:/@p5.web.widgets.find/*/*?value
  disabled





/*
 * Adding actual editor to [create-widgets] invocation below.
 */
add:x:/../*/create-widgets/*/div/*/widgets/=editor
  src:x:/@.editor-instance/*





/*
 * "Un-toggling" all previously created tab buttons.
 */
p5.web.widgets.find:hyper-ide-editor-tab-buttons
  .activate
micro.css.delete:x:/-/*/*?value
  class:toggled





/*
 * Retrieving active events that will create a plugin button for our current CM mode.
 */
vocabulary:~hyper-ide.plugins.{0}.
  :x:/@.editor-instance/*/*/mode?value





/*
 * Adding all plugin active events for current mode into [.plugins] below.
 */
.plugins
  return:x:/../*/*
for-each:x:/@vocabulary/*?value
  insert-before:x:/@.plugins/0/-
    src:x:/@_dp?value





/*
 * Evaluating [.plugins] lambda, which will invoke all plugin button events for us,
 * and return its result.
 */
eval:x:/@.plugins





/*
 * Adding the results of above plugin creation logic into our toolbar widget.
 *
 * Notice, the above [eval] will return the results of all plugin active events.
 */
insert-before:x:/../*/create-widgets/*/div/[0,1]/*/widgets/0/-
  src:x:/@eval/*





/*
 * Making sure we inject our toolbar as the first in our list of toolbars.
 */
p5.web.widgets.get-children:hyper-ide-toolbars





/*
 * Creating our widgets.
 *
 * We create one "tab control button", then we add one editor into "tab control editors",
 * before we finally create one toolbar for saving file, etc. The latter will also contain
 * all plugins for current mode.
 */
create-widgets

  /*
   * Toolbar for saving editor's content, closing it, etc.
   */
  div
    after:x:/@p5.web.widgets.get-children/*/0?value
    class:strip hyper-ide-toolbar
    style:"float:right;"
    .toolbar:x:/../*/file?value
    events

      /*
       * Invoked when for some reasons active file changes name.
       */
      hyper-ide.set-active-filename

        /*
         * Checking if this is our active editor, and if not, returning early.
         */
        get-widget-property:x:/../*/_event?value
          class
        if:x:/@get-widget-property/*/*?value
          ~:hide
          return

        /*
         * Updating [.file] attribute for widget.
         */
        set-widget-property:x:/../*/_event?value
          .toolbar:x:/../*/_arg?value

    widgets

      /*
       * Save button.
       */
      button
        style:"padding-left:35px;padding-right:35px;margin-bottom:0;"
        innerValue:@"<span class=""icon-floppy-disk""></span>"
        title:Saves your file, keyboard shortcut Alt+S
        .save-button:x:/../*/file?value
        onclick

          /*
           * Invoking event responsible for saving file.
           */
          hyper-ide.save-active-editor

      /*
       * Renames file.
       */
      button
        innerValue:@"<span class=""icon-pencil""></span>"
        style:"margin-bottom:0;"
        title:Renames your file
        onclick

          /*
           * Renaming file.
           * First retrieving file name.
           */
          p5.web.widgets.get-parent:x:/../*/_event?value
          get-widget-property:x:/-/*/*?value
            .toolbar

          /*
           * Then passing filename into modal widget.
           */
          eval-x:x:/+/**/.filename
          create-widgets
            micro.widgets.modal:hyper-ide-confirm-rename-file
              widgets
                h3
                  innerValue:New name
                micro.widgets.wizard-form:hyper-ide-rename-file-form
                  text:hyper-ide-new-file-name
                    info:Name
                    .data-field:name
                    placeholder:New name for your file ...
                    onkeydown:@"if (event.keyCode == 13) {p5.$('hyper-ide-rename-file-btn').raise('onclick');return false;}"
                    oninit

                      /*
                       * Forward evaluated above.
                       */
                      .filename:x:/../*/get-widget-property/*/*?value
                      split:x:/-?value
                        =:/

                      /*
                       * Setting initial focus to "Yes" button, and setting 
                       * initial value to old name.
                       */
                      set-widget-property:x:/../*/_event?value
                        value:x:/@split/0/-?name
                      micro.page.set-focus:x:/../*/_event?value

                div
                  class:right
                  widgets
                    div
                      class:strip
                      style:"display:inline-block;"
                      widgets
                        button:hyper-ide-rename-file-btn
                          innerValue:OK
                          style:"margin-bottom:0;"
                          onclick

                            /*
                             * Forward evaluated above.
                             */
                            .filename:x:/../*/get-widget-property/*/*?value

                            /*
                             * Finding file's folder name.
                             *
                             * Making sure we get it in canonised form.
                             */
                            .folder
                            split:x:/@.filename?value
                              =:/
                            set:x:/@split/0/-
                            join:x:/@split/*?name
                              sep:/
                            set:x:/@join?value
                              src:/{0}/
                                :x:/@join?value
                            trim-left:x:/@join?value
                              chars:/
                            set:x:/@.folder?value
                              src:/{0}
                                :x:/@trim-left?value

                            /*
                             * Serializing form to figure out new name for file.
                             */
                            micro.widgets.wizard-form.value:hyper-ide-rename-file-form

                            /*
                             * Renaming file.
                             */
                            move-file:x:/@.filename?value
                              dest:{0}{1}
                                :x:/@.folder?value
                                :x:/@micro.widgets.wizard-form.value/*/name?value

                            /*
                             * Refreshing tree, since folder's content now has changed.
                             */
                            add:x:/../*/micro.widgets.tree.refresh-items/*/items
                              src:x:/@.folder?value
                            micro.widgets.tree.refresh-items:hyper-ide-folder-tree-browser
                              force-expand:bool:true
                              items

                            /*
                             * Changes name of active file.
                             */
                            hyper-ide.set-active-filename:{0}{1}
                              :x:/@.folder?value
                              :x:/@micro.widgets.wizard-form.value/*/name?value

                            /*
                             * Selecting (updated) file in tree view now.
                             */
                            add:x:/../*/micro.widgets.tree.select-items/*/items
                              src:{0}{1}
                                :x:/@.folder?value
                                :x:/@micro.widgets.wizard-form.value/*/name?value
                            micro.widgets.tree.select-items:hyper-ide-folder-tree-browser
                              items

                            /*
                             * Deleting modal widget, and giving user some feedback.
                             */
                            delete-widget:hyper-ide-confirm-rename-file

                        button
                          innerValue:Cancel
                          style:"margin-bottom:0;"
                          onclick

                            /*
                             * Simply deleting modal widget.
                             */
                            delete-widget:hyper-ide-confirm-rename-file

      /*
       * Deletes file.
       */
      button
        innerValue:@"<span class=""icon-bin""></span>"
        title:Deletes your file
        style:"margin-bottom:0;"
        onclick

          /*
           * Deleting file.
           * First retrieving file name.
           */
          p5.web.widgets.get-parent:x:/../*/_event?value
          get-widget-property:x:/-/*/*?value
            .toolbar

          /*
           * Then passing filename into modal widget.
           */
          eval-x:x:/+/**/.filename
          create-widgets
            micro.widgets.modal:hyper-ide-confirm-delete-file
              widgets
                h3
                  innerValue:Confirm deletion
                literal
                  element:p
                  style:"float:left;font-size:5rem;margin-right:.5rem;"
                  class:icon-bin
                p
                  innerValue:@"Are you sure you want to delete the <code>{0}</code> file? I need you to confirm this action before I allow you to do this."
                    :x:/@get-widget-property/*/*?value
                p
                  innerValue:@"<strong>Warning, this action is permanent!</strong>"
                div
                  class:right
                  widgets
                    div
                      class:strip
                      style:"display:inline-block;"
                      widgets
                        button
                          innerValue:Yes
                          style:"margin-bottom:0;"
                          oninit

                            /*
                             * Setting initial focus to "Yes" button.
                             */
                            micro.page.set-focus:x:/../*/_event?value

                          onclick

                            /*
                             * Forward evaluated above.
                             */
                            .filename:x:/../*/get-widget-property/*/*?value

                            /*
                             * Deleting actual file.
                             */
                            delete-file:x:/@.filename?value

                            /*
                             * Deleting selected item from tree.
                             *
                             * Notice, selected tree view item will always be the file or folder 
                             * user is trying to delete, since selecting a tree view item, 
                             * changes the active file object edited.
                             */
                            micro.widgets.tree.get-selected-items:hyper-ide-folder-tree-browser
                            add:x:/../*/micro.widgets.tree.delete-items
                              src:x:/@micro.widgets.tree.get-selected-items/*
                            micro.widgets.tree.delete-items:hyper-ide-folder-tree-browser

                            /*
                             * Making sure we close all editor for file.
                             */
                            eval-x:x:/+/*
                            hyper-ide.close-editors
                              filter:x:/@.filename?value
                              exact:bool:true

                            /*
                             * Deleting modal window.
                             */
                            delete-widget:hyper-ide-confirm-delete-file

                        button
                          innerValue:No
                          style:"margin-bottom:0;"
                          onclick

                            /*
                             * Simply deleting modal widget.
                             */
                            delete-widget:hyper-ide-confirm-delete-file

      /*
       * Downloads file.
       */
      button
        innerValue:@"<span class=""icon-download2""></span>"
        title:Download file
        style:"margin-bottom:0;"
        onclick

          /*
           * Downloading file.
           */
          p5.web.widgets.get-parent:x:/../*/_event?value
          get-widget-property:x:/-/*/*?value
            .toolbar
          micro.download.file:x:/-/*/*?value

      /*
       * Toggling visibility of "solution explorer".
       */
      button
        innerValue:@"<span class=""icon-tree""></span>"
        title:Toggle visibility of solution explorer
        style:"margin-bottom:0;"
        .toogle-solution-explorer-button
        oninit

          /*
           * Checking of "solution explorer" is visible, and if it is, making
           * sure button is initially created with the "toggled" class.
           */
          get-widget-property:hyper-ide-file-browser-wrapper
            class
          if:x:/@get-widget-property/*/*/=~hide
            not

            /*
             * Solution explorer is visible.
             *
             * Hence, we make sure our "toggle solution explorer" button becomes toggled.
             */
            micro.css.add:x:/../*/_event?value
              class:toggled

        onclick

          /*
           * Toggling "hide" class for solution explorer, and "toggled" class
           * for the currently clicked button.
           *
           * In addition, we toggle "col-70" and "col" for our editor wrapper.
           */
          micro.css.toggle:hyper-ide-file-browser-wrapper
            class:hide
          p5.web.widgets.find
            .toogle-solution-explorer-button
          micro.css.toggle:x:/-/*/*?value
            class:toggled
          micro.css.toggle:hyper-ide-file-editor
            class:col-70 col

      /*
       * Close editor button.
       */
      button
        innerValue:@"<span class=""icon-cross""></span>"
        style:"margin-bottom:0;"
        title:Close editor, keyboard shortcut Alt+X
        onclick

          /*
           * Closing active editor
           */
          hyper-ide.close-active-editor

  /*
   * Activate tab/editor button.
   */
  button
    parent:hyper-ide-editor-tab-buttons
    class:hyper-ide-activate-tab-button toggled
    .activate:x:/../*/file?value
    innerValue:x:/../*/split/[0,1]/0/-?name
    title:x:/../*/file?value
    events

      /*
       * Invoked when for some reasons active file changes name.
       */
      hyper-ide.set-active-filename

        /*
         * Checking if this is our active file, and if not, returning early.
         */
        get-widget-property:x:/../*/_event?value
          class
        if:x:/@get-widget-property/*/*?value
          !~:toggled
          return

        /*
         * Updating [.file] attribute for widget.
         */
        split:x:/../*/_arg?value
          =:/
        set-widget-property:x:/../*/_event?value
          .activate:x:/../*/_arg?value
          innerValue:x:/@split/0/-?name
          title:x:/../*/_arg?value

    onclick

      /*
       * Getting filename for editor.
       */
      get-widget-property:x:/../*/_event?value
        .activate

      /*
       * Activating editor, and verifying invocation was a success.
       */
      hyper-ide.set-active-editor:x:/@get-widget-property/*/*?value
      if:x:/-?value

        /*
         * Making sure we scroll tree view item into view.
         */
        p5.web.widgets.find-first-like:hyper-ide-folder-tree-browser
          class:tree-selected

  /*
   * Actual editor for file.
   *
   * Dynamically created above according to file extension.
   */
  div
    parent:hyper-ide-editor-tab-editors
    class:hyper-ide-codemirror-wrapper
    .editor:x:/../*/file?value
    events

      /*
       * Invoked when for some reasons active file changes name.
       */
      hyper-ide.set-active-filename

        /*
         * Checking if this is our active editor, and if not, returning early.
         */
        get-widget-property:x:/../*/_event?value
          class
        if:x:/@get-widget-property/*/*?value
          ~:hide
          return

        /*
         * Updating [.file] attribute for widget.
         */
        set-widget-property:x:/../*/_event?value
          .editor:x:/../*/_arg?value

    widgets:editor
