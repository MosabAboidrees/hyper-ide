
/*
 * Edits the specified [file], using some sort of CodeMirror editor, or whatever
 * is available.
 */





/*
 * Sanity checking arguments.
 */
micro.lambda.contract.min:x:/..
  file:string





/*
 * Retrieving file extension of file.
 */
split:x:/../*/file?value
  =:/
split:x:/-/0/-?name
  =:.





/*
 * Loading file, getting ready to launch editor.
 */
load-file:x:/../*/file?value
  convert:false





/*
 * Retrieving editor for file, according to file's extension, making sure we
 * pass in file's content.
 *
 * First checking if a specialised editor exists.
 */
.editor-instance
if:x:/@split/*?count
  >:int:1
  and
    fetch:x:/0/0?value
      file-exists:@IDE/helpers/editors/{0}.hl
        :x:/@split/0/-?name

  /*
   * Specialised editor exists, loading it by evaluating its file, and adding
   * the returned arguments into above [.editor-instance] lambda.
   */
  eval-x:x:/+/*/content
  micro.evaluate.file:@IDE/helpers/editors/{0}.hl
    :x:/@split/0/-?name
    content:x:/@load-file/*?value

  /*
   * Adding editor widget into above [.editor-instance].
   */
  add:x:/@.editor-instance
    src:x:/@micro.evaluate.file/*

else

  /*
   * Trying to use one of the standard CodeMirror editors.
   *
   * First loading file extension to CM mode mapping file.
   */
  load-file:@IDE/configuration/extension2cm-instance.hl

  /*
   * Checking if specified mode exists.
   */
  if:x:/@load-file/*/*/{0}
    :x:/@split/0/-?name

    /*
     * Extension to mode exists.
     */
    eval-x:x:/+/*/*/*
    add:x:/@.editor-instance
      src
        micro.widgets.codemirror
          .data-field:content
          mode:x:/@load-file/*/*/{0}?value
            :x:/@split/0/-?name
          value:x:/../*/load-file/*?value
          auto-focus:true
          .keys
            Alt-S:@"p5.$('hyper-ide-editor-wrapper').raise('.onsave');"
            Alt-X:@"p5.$('hyper-ide-editor-wrapper').raise('.onclose');"
            Alt-N:@"p5.$('hyper-ide-editor-wrapper').raise('.onnext');"
            Alt-P:@"p5.$('hyper-ide-editor-wrapper').raise('.onprevious');"

  else

    /*
     * No editor exists, returning early, warning user first
     */
    micro.windows.info:No editor for that file type
      class:micro-windows-info warning
    return





/*
 * Setting header to file being edited.
 */
hyper-ide.set-header:x:/../*/file?value





/*
 * Checking if splash screen is open, and closing it if it is.
 */
if
  fetch:x:/0/0?value
    widget-exists:hyper-ide-splash
  delete-widget:hyper-ide-splash





/*
 * Making sure our "tab control" exists.
 */
if
  fetch:x:/0/0?value
    widget-exists:hyper-ide-editor-tab
  not

  /*
   * Creating our "tab control" wrapper.
   */
  create-widget:hyper-ide-editor-tab
    parent:hyper-ide-file-editor
    class:hyper-ide-editor-tab
    widgets
      container:hyper-ide-editor-tab-buttons
        class:hyper-ide-editor-tab-buttons
      container:hyper-ide-editor-tab-editors
        class:hyper-ide-editor-tab-content shaded rounded





/*
 * Making sure we delete any previously created file object toolbars.
 */
if
  fetch:x:/0/0?value
    widget-exists:hyper-ide-editor-toolbar
  delete-widget:hyper-ide-editor-toolbar





/*
 * Making sure we delete any previously created editors.
 */
p5.web.widgets.find
  .editor
delete-widget:x:/-/*/*?value





/*
 * Adding actual editor to [create-widgets] invocation below.
 */
add:x:/../*/create-widgets/*/div/*/widgets/=editor
  src:x:/@.editor-instance/*





/*
 * "Un-toggling" all previously created tab buttons.
 */
p5.web.widgets.find
  .activate
micro.css.delete:x:/-/*/*?value
  class:toggled





/*
 * Checking if editor for file has previously been opened (meaning there exists a tab button for it).
 *
 * If the file has already been opened, we don't create our "tab control button", but
 * rather "toggle" it.
 */
p5.web.widgets.find
  .activate:x:/../*/file?value
if:x:/@p5.web.widgets.find/*/*?value

  /*
   * Making sure we don't create our "tab button", but rather "toggle" it.
   */
  set:x:/../*/create-widgets/*/button/*/.activate/.
  micro.css.add:x:/@p5.web.widgets.find/*/*?value
    class:toggled





/*
 * Retrieving plugin toolbar buttons.
 */
vocabulary:~hyper-ide.plugins.{0}.
  :x:/../*/split/[1,2]/0/-?name
.plugins
  return:x:/../*/*
for-each:x:/@vocabulary/*?value
  insert-before:x:/@.plugins/0/-
    src:x:/@_dp?value
eval:x:/@.plugins
insert-after:x:/../*/create-widgets/*/div/=hyper-ide-editor-toolbar/*/widgets/0
  src:x:/@eval/*





/*
 * Creating our widgets.
 *
 * We create one "tab control button", we add one editor into "tab control editors",
 * and we create one toolbar for saving file etc.
 */
create-widgets

  /*
   * Toolbar for saving editor's content, closing it, etc.
   */
  div:hyper-ide-editor-toolbar
    before:hyper-ide-active-object
    class:strip
    style:"display:inline-block;"
    .toolbar:x:/../*/file?value
    widgets

      /*
       * Save button.
       */
      button:hyper-ide-save-button
        style:"padding-left:35px;padding-right:35px;margin-bottom:0;"
        innerValue:@"<span class=""icon-floppy-disk""></span>"
        title:Saves your file, keyboard shortcut Alt+S
        onclick

          /*
           * Invoking event responsible for saving file.
           */
          hyper-ide.save-file

      /*
       * Toggling visibility of "solution explorer".
       */
      button
        innerValue:@"<span class=""icon-tree""></span>"
        title:Toggle visibility of solution explorer
        style:"margin-bottom:0;"
        oninit

          /*
           * Checking of "solution explorer" is visible, and if it is, making
           * sure button is initially created with the "toggled" class.
           */
          get-widget-property:hyper-ide-file-browser-wrapper
            class
          if:x:/@get-widget-property/*/*/=~hide
            not

            /*
             * Solution explorer is visible.
             */
            micro.css.add:x:/../*/_event?value
              class:toggled

        onclick

          /*
           * Toggling "hide" class for solution explorer, and "toggled" class
           * for the currently clicked button.
           *
           * In addition, we toggle "col-70" and "col" for our editor wrapper.
           */
          micro.css.toggle:hyper-ide-file-browser-wrapper
            class:hide
          micro.css.toggle:x:/../*/_event?value
            class:toggled
          micro.css.toggle:hyper-ide-file-editor
            class:col-70 col

      /*
       * Close editor button.
       */
      button:hyper-ide-close-button
        innerValue:@"<span class=""icon-cross""></span>"
        style:"margin-bottom:0;"
        title:Close editor, keyboard shortcut Alt+X
        onclick

          /*
           * Closing active editor
           */
          hyper-ide.close

  /*
   * Activate tab/editor button.
   */
  button
    parent:hyper-ide-editor-tab-buttons
    class:hyper-ide-activate-tab-button toggled
    .activate:x:/../*/file?value
    innerValue:x:/../*/split/[0,1]/0/-?name
    title:x:/../*/split/[0,1]/0/-?name
    onclick

      /*
       * Checking if this editor is already the active one, at which point we
       * return early, to avoid invoking logic below.
       */
      get-widget-property:x:/../*/_event?value
        class
      if:x:/-/*/*/=~toggled
        return

      /*
       * For simplicity reasons, we simply find the file that was clicked,
       * and selects its associated tree item, since this will do everything 
       * for us automatically, such as (re)-loading the editor, etc.
       */
      get-widget-property:x:/../*/_event?value
        .activate
      add:x:/../*/micro.widgets.tree.select-items/*/items
        src:x:/@get-widget-property/*/*?value
      micro.widgets.tree.select-items:hyper-ide-folder-tree-browser
        items

      /*
       * Making sure we scroll item into view.
       */
      p5.web.widgets.find-first-like:hyper-ide-folder-tree-browser
        class:tree-selected
      p5.web.send-javascript:@"p5.$('{0}').el.scrollIntoView();"
        :x:/@p5.web.widgets.find-first-like/*/*?value

  /*
   * Actual editor for file.
   *
   * Dynamically created above according to file extension.
   */
  div:hyper-ide-editor-wrapper
    parent:hyper-ide-editor-tab-editors
    class:hyper-ide-codemirror-wrapper
    .editor:x:/../*/file?value

    /*
     * Helper Ajax events, necessary to map up keyboard shortcuts, among other things.
     */
    .onsave
      hyper-ide.save-file

    .onclose
      hyper-ide.close

    .onprevious
      hyper-ide.previous

    .onnext
      hyper-ide.next

    events


      /*
       * Returns ID of active code editor.
       */
      hyper-ide.get-code-editor

        /*
         * Finding active editor's textarea, and returning its ID.
         */
        p5.web.widgets.find-first:x:/../*/_event?value
          element:textarea
        return:x:/@p5.web.widgets.find-first/*/*?value


      /*
       * Returns code for currently active editor.
       */
      hyper-ide.get-code

        /*
         * Finding textarea and returning its innerValue.
         */
        hyper-ide.get-code-editor
        get-widget-property:x:/-?value
          innerValue
        return:x:/@get-widget-property/*/*?value


      /*
       * Sets code for currently active editor.
       */
      hyper-ide.set-code

        /*
         * First finding active editor's textarea, and updating it, in case
         * other parts of our code tries to retrieve it during the current request.
         */
        hyper-ide.get-code-editor
        set-widget-property:x:/-?value
          innerValue:x:/../*/_arg?value

        /*
         * Updating value of CodeMirror instance on client side.
         */
        p5.web.send-javascript:@"p5['{0}'].getDoc().setValue(p5.$('{0}').el.value);"
          :x:/@hyper-ide.get-code-editor?value


      /*
       * Returns filename for currently active editor.
       */
      hyper-ide.get-filename

        /*
         * Returning filename to caller.
         */
        get-widget-property:x:/../*/_event?value
          .editor
        return:x:/@get-widget-property/*/*?value


      /*
       * Saves active file.
       */
      hyper-ide.save-file

        /*
         * Retriving filename.
         */
        hyper-ide.get-filename

        /*
         * Retrieving editor's content.
         */
        hyper-ide.get-code

        /*
         * Saving file and providing some feedback to user.
         */
        save-file:x:/@hyper-ide.get-filename?value
          src:x:/@hyper-ide.get-code?value
        micro.windows.info:File was successfully saved
          class:micro-windows-info success


      /*
       * Close active file editor.
       */
      hyper-ide.close

        /*
         * Closing editor.
         */
        get-widget-property:x:/../*/_event?value
          .editor
        eval-x:x:/+/*
        hyper-ide.close-editors
          filter:x:/@get-widget-property/*/*?value
          exact:bool:true


      /*
       * Shows the previous available editor.
       */
      hyper-ide.previous

        /*
         * Finding all "activate buttons".
         */
        p5.web.widgets.find
          .activate

        /*
         * Checking if there's only one button, at which point we return immediately,
         * since switching editor instance, by the very definition becomes impossible.
         */
        if:x:/@p5.web.widgets.find/*/*?count
          <:int:2
          return

        /*
         * Retrieving class names for all "activate buttons".
         */
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          class

        /*
         * Raising the "onclick" event for the activate button that is before the currently active one.
         */
        p5.web.widgets.ajax-events.raise:x:/@get-widget-property/*/*(/=~toggled)/./-?name
          onclick


      /*
       * Shows the next available editor.
       */
      hyper-ide.next

        /*
         * Finding all "activate buttons".
         */
        p5.web.widgets.find
          .activate

        /*
         * Checking if there's only one button, at which point we return immediately,
         * since switching editor instance, by the very definition becomes impossible.
         */
        if:x:/@p5.web.widgets.find/*/*?count
          <:int:2
          return

        /*
         * Retrieving class names for all "activate buttons".
         */
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          class

        /*
         * Raising the "onclick" event for the activate button that is after the currently active one.
         */
        p5.web.widgets.ajax-events.raise:x:/@get-widget-property/*/*(/=~toggled)/./+?name
          onclick

    widgets:editor
