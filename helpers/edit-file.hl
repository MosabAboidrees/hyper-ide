
/*
 * Edits the specified [file], using some sort of CodeMirror editor, or whatever
 * is available.
 */





/*
 * Sanity checking arguments.
 */
micro.lambda.contract.min:x:/..
  file:string





/*
 * Checking if file is already being edited.
 */
p5.web.widgets.find
  .hyper-ide-activate-btn:x:/../*/file?value
if:x:/-/*/*?value

  /*
   * file is already being edited, warning user and returning early.
   */
  micro.windows.info:File is already open in another editor
    class:micro-windows-info warning
  return





/*
 * Retrieving file extension of file.
 */
split:x:/../*/file?value
  =:.





/*
 * Sanity checking for most common types of binary files, which we obviously 
 * don't allow to be edited.
 */
switch:x:/@split/0/-?name
  case:dll
  case:pdb
  case:exe
  case:mdb

    /*
     * Warning user and returning early.
     */
    micro.windows.info:File cannot be edited in Hyper IDE
      class:micro-windows-info warning
    return

  case:png
  case:jpg
  case:jpeg
  case:gif
  case:bmp

    /*
     * Warning user, downloading file, and returning early.
     */
    micro.windows.info:File cannot be edited in Hyper IDE
      class:micro-windows-info warning
    micro.download.file:x:/../*/file?value
    return





/*
 * Loading file, getting ready to launch editor.
 */
load-file:x:/../*/file?value
  convert:false





/*
 * Retrieving editor for file, according to file's extension, making sure we
 * pass in file's content.
 *
 * First checking if a specialised editor exists.
 */
.editor-instance
if:x:/@split/*?count
  >:int:1
  and
    fetch:x:/0/0?value
      file-exists:@IDE/helpers/editors/{0}.hl
        :x:/@split/0/-?name

  /*
   * Specialised editor exists, loading it by evaluating its file, and adding
   * the returned arguments into above [.editor-instance] lambda.
   */
  eval-x:x:/+/*/content
  micro.evaluate.file:@IDE/helpers/editors/{0}.hl
    :x:/@split/0/-?name
    content:x:/@load-file/*?value
  add:x:/@.editor-instance
    src:x:/@micro.evaluate.file/*

else

  /*
   * Trying to use one of the standard CodeMirror editors.
   *
   * First loading file extension to CM mode file, to create our mapping.
   */
  load-file:@IDE/configuration/extension2cm-instance.hl

  /*
   * Checking if specified mode exists.
   */
  if:x:/@load-file/*/*/{0}
    :x:/@split/0/-?name

    /*
     * Extension to mode exists.
     */
    eval-x:x:/+/*/*/*
    add:x:/@.editor-instance
      src
        hypereval.widgets.codemirror
          mode:x:/@load-file/*/*/{0}?value
            :x:/@split/0/-?name
          value:x:/../*/load-file/*?value
          height:635px
          auto-focus:true
          .keys
            Alt-S:@"p5.$('hyper-ide-editors-wrapper').raise('.onsave');"
            Alt-X:@"p5.$('hyper-ide-editors-wrapper').raise('.onclose');"

  else

    /*
     * Defaulting mode to Markdown.
     */
    eval-x:x:/+/*/*/*
    add:x:/@.editor-instance
      src
        hypereval.widgets.codemirror
          mode:markdown
          value:x:/../*/load-file/*?value
          height:635px
          auto-focus:true
          .keys
            Alt-S:@"p5.$('hyper-ide-editors-wrapper').raise('.onsave');"
            Alt-X:@"p5.$('hyper-ide-editors-wrapper').raise('.onclose');"





/*
 * Figuring out if above logic was able to retrieve an editor at all, and if not,
 * returning early, warning user first.
 */
if:x:/@.editor-instance/*
  not

  /*
   * Warning user and returning early.
   */
  micro.windows.info:We have no editor for these types of files
    class:micro-windows-info warning
  micro.download.file:x:/../*/file?value
  return





/*
 * Then figuring out the file's name, without its extension.
 */
split:x:/../*/file?value
  =:/





/*
 * Making sure we pass in editor instantiated above into our [create-widget] invocation.
 */
insert-before:x:/../*/create-widgets/*/div/*/widgets/0
  src:x:/@.editor-instance/*





/*
 * Setting header to file being edited.
 */
hyper-ide.set-header:x:/../*/file?value





/*
 * Figuring out how to position our editor.
 *
 * This varies according to whether or not another editor has been previously 
 * created or not, since we want to make sure all of our editors appears like
 * tab controls, and their activate buttons are positioned differently, than
 * their actual editor content.
 */
.activate-btn-position-arg
if
  fetch:x:/0/0?value
    widget-exists:hyper-ide-editors-wrapper
  not

  /*
   * We need to create main editors wrapper.
   *
   * We also position our editor inside of the main editor wrapper widget.
   */
  create-container-widget:hyper-ide-editors-wrapper
    parent:hyper-ide-file-editor
    style:"overflow:visible;"
    .onsave

      /*
       * Saves active file.
       */
      hyper-ide.save-file

    .onclose

      /*
       * Close active file editor.
       */
      hyper-ide.close

    events


      /*
       * Returns code for currently active editor.
       */
      hyper-ide.get-code

        /*
         * First finding active editor.
         */
        p5.web.widgets.find
          .hyper-ide-editor
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          class

        /*
         * Then retrieving its textarea's innerValue, and returning it to caller.
         */
        p5.web.widgets.find:x:/@get-widget-property/*/*(!/=~hide)/.?name
          element:textarea
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          value
        return:x:/@get-widget-property/*/*?value


      /*
       * Sets code for currently active editor.
       */
      hyper-ide.set-code

        /*
         * First finding active editor.
         */
        p5.web.widgets.find
          .hyper-ide-editor
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          class

        /*
         * Then retrieving its textarea.
         */
        p5.web.widgets.find:x:/@get-widget-property/*/*(!/=~hide)/.?name
          element:textarea

        /*
         * Escaping any back-ticks in code.
         */
        replace:x:/../*/_arg?value
          src:`
          dest:\`

        /*
         * Updating value of CodeMirror instance on client side.
         */
        p5.web.send-javascript:@"p5['{0}'].getDoc().setValue(`{1}`);"
          :x:/@p5.web.widgets.find/*/*?value
          :x:/@replace?value


      /*
       * Sets code for currently active editor.
       */
      hyper-ide.get-code-editor

        /*
         * First finding active editor.
         */
        p5.web.widgets.find
          .hyper-ide-editor
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          class

        /*
         * Then retrieving its textarea, and returning the ID of it to caller.
         */
        p5.web.widgets.find:x:/@get-widget-property/*/*(!/=~hide)/.?name
          element:textarea
        return:x:/@p5.web.widgets.find/*/*?value


      /*
       * Returns filename for currently active editor.
       */
      hyper-ide.get-filename

        /*
         * First finding active editor.
         */
        p5.web.widgets.find
          .hyper-ide-editor
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          class

        /*
         * Then retrieving its filename, and returning it to caller.
         */
        get-widget-property:x:/@get-widget-property/*/*(!/=~hide)/.?name
          .hyper-ide-editor
        return:x:/@get-widget-property/*/*?value


      /*
       * Saves active file.
       */
      hyper-ide.save-file

        /*
         * First finding active editor.
         */
        p5.web.widgets.find
          .hyper-ide-editor
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          class
        p5.web.widgets.find-first:x:/@get-widget-property/*/*(!/=~hide)/.?name
          .save-button
        p5.web.widgets.ajax-events.raise:x:/-/*/*?value
          onclick


      /*
       * Close active file editor.
       */
      hyper-ide.close

        /*
         * First finding active editor.
         */
        p5.web.widgets.find
          .hyper-ide-editor
        get-widget-property:x:/@p5.web.widgets.find/*/*?value
          class
        p5.web.widgets.find-first:x:/@get-widget-property/*/*(!/=~hide)/.?name
          .close-button
        p5.web.widgets.ajax-events.raise:x:/-/*/*?value
          onclick


  add:x:/@.activate-btn-position-arg
    src
      parent:hyper-ide-editors-wrapper

else

  /*
   * A wrapper already exists, hence we hide all of the existing editors.
   */
  p5.web.widgets.find
    .hyper-ide-editor
  micro.css.add:x:/-/*/*?value
    class:hide

  /*
   * In addition we need to delete the toggled CSS class for all editor selectors.
   *
   * These are the buttons that activate an editor instance.
   */
  p5.web.widgets.find
    .hyper-ide-activate-btn
  micro.css.delete:x:/-/*/*?value
    class:toggled

  /*
   * Making sure we position our activate button after the last existing activate 
   * button.
   */
  add:x:/@.activate-btn-position-arg
    src:"after:{0}"
      :x:/@p5.web.widgets.find/*/0/-?value





/*
 * Retrieving plugin toolbar buttons, first for file type.
 */
vocabulary:~hyper-ide.plugins.{0}
  :x:/../*/split/[0,1]/0/-?name
.plugins
  return:x:/../*/*
for-each:x:/@vocabulary/*?value
  insert-before:x:/@.plugins/0/-
    src:x:/@_dp?value
eval:x:/@.plugins
insert-before:x:/../*/create-widgets/**/widgets/=toolbar-buttons/0/-2
  src:x:/@eval/*





/*
 * The creating editor for currently edited file.
 *
 * This will create both the activate button, and the actual editor itself.
 * First making sure we pass in our activate button positioning argument.
 */
add:x:/+/*/button
  src:x:/@.activate-btn-position-arg/*
create-widgets

  /*
   * First our activate button.
   */
  button
    innerValue:x:/@split/0/-?name
    style:"margin-bottom:0;"
    title:x:/../*/file?value
    class:hyper-ide-editor-selector toggled
    .hyper-ide-activate-btn:x:/../*/file?value
    onclick

      /*
       * Checking if this is our currently active editor, at which point we return
       * early.
       */
      get-widget-property:x:/../*/_event?value
        class:
      if:x:/@get-widget-property/*/*?value
        ~:toggled
        return

      /*
       * Hiding all editors.
       */
      p5.web.widgets.find
        .hyper-ide-editor
      micro.css.add:x:/-/*/*?value
        class:hide

      /*
       * Then finding editor belonging to currently clicked button, and making 
       * sure we make it visible.
       */
      get-widget-property:x:/../*/_event?value
        .hyper-ide-activate-btn
      p5.web.widgets.find
        .hyper-ide-editor:x:/@get-widget-property/*/*?value
      micro.css.delete:x:/-/*/*?value
        class:hide

      /*
       * Then removing toggled class for all editor selector buttons, before we
       * add the toggled class for only the currently clicked button.
       */
      p5.web.widgets.find
        .hyper-ide-activate-btn
      micro.css.delete:x:/-/*/*?value
        class:toggled
      micro.css.add:x:/../*/_event?value
        class:toggled

      /*
       * Setting focus automatically to active CM editor instance.
       */
      hyper-ide.get-code-editor
      p5.web.send-javascript:@"p5['{0}'].focus();"
        :x:/@hyper-ide.get-code-editor?value

      /*
       * Then setting header to filename being currently edited, to make sure the
       * user has visual clues about which file is actually edited.
       */
      get-widget-property:x:/../*/_event?value
        title
      hyper-ide.set-header:x:/@get-widget-property/*/*?value

      /*
       * Then making sure we track our active item in our TreeView.
       */
      add:x:/../*/micro.widgets.tree.select-items/*/items
        src:x:/@get-widget-property/*/*?value
      micro.widgets.tree.select-items:hyper-ide-folder-tree-browser
        items

  /*
   * Then the wrapper for our editor's actual content.
   */
  div
    parent:hyper-ide-editors-wrapper
    class:hyper-ide-editor-wrapper
    .hyper-ide-editor:x:/../*/file?value
    widgets

      /*
       * Toolbar buttons for editor instance.
       */
      div
        class:right air-top
        widgets
          div
            class:strip
            style:"display:inline-block;"
            widgets:toolbar-buttons

              /*
               * Save button.
               */
              button
                style:"padding-left:35px;padding-right:35px;margin-bottom:0;"
                innerValue:@"<span class=""icon-floppy-disk""></span>"
                .save-button
                onclick

                  /*
                   * Retriving filename.
                   */
                  p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                    .hyper-ide-editor
                  get-widget-property:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                    .hyper-ide-editor

                  /*
                   * Retrieving editor's content, saving file, and providing some 
                   * feedback to user.
                   */
                  hyper-ide.get-code
                  save-file:x:/@get-widget-property/*/*?value
                    src:x:/@hyper-ide.get-code?value
                  micro.windows.info:File was successfully saved
                    class:micro-windows-info success

              /*
               * "Maximise" button.
               */
              button
                innerValue:@"<span class=""icon-enlarge2""></span>"
                title:Make editor surface larger
                style:"margin-bottom:0;"
                onclick

                  /*
                   * Checking if we should hide or display file browser.
                   */
                  get-widget-property:hyper-ide-file-browser-wrapper
                    visible
                  micro.css.toggle:hyper-ide-file-browser-wrapper
                    class:hide
                  p5.web.widgets.find:hyper-ide-editors-wrapper
                    innerValue:@"<span class=""icon-enlarge2""></span>"
                  micro.css.toggle:x:/-/*/*?value
                    class:toggled
                  micro.css.toggle:hyper-ide-file-editor
                    class:col-70 col
                  micro.css.toggle:hyper-ide-object-details
                    class:hide

              /*
               * Close editor button.
               */
              button
                innerValue:@"<span class=""icon-cross""></span>"
                style:"margin-bottom:0;"
                .close-button
                onclick

                  /*
                   * Deleting actual editor widget.
                   */
                  p5.web.widgets.find-first-ancestor:x:/../*/_event?value
                    .hyper-ide-editor

                  /*
                   * We need to figure the filename for currently closed instance,
                   * such that we can later also find its activate button, and 
                   * delete it.
                   */
                  get-widget-property:x:/@p5.web.widgets.find-first-ancestor/*/*?value
                    .hyper-ide-editor

                  /*
                   * Then we can delete actual editor instance.
                   */
                  delete-widget:x:/@p5.web.widgets.find-first-ancestor/*/*?value

                  /*
                   * Then deleting its activate button.
                   */
                  p5.web.widgets.find
                    .hyper-ide-activate-btn:x:/@get-widget-property/*/*?value
                  delete-widget:x:/@p5.web.widgets.find/*/*?value

                  /*
                   * Checking if this is our last open editor, at which point we
                   * delete the editor wrapper entirely.
                   */
                  p5.web.widgets.find
                    .hyper-ide-activate-btn
                  if:x:/@p5.web.widgets.find/*/*?count
                    =:int:0

                    /*
                     * Deleting editors wrapper.
                     */
                    delete-widget:hyper-ide-editors-wrapper

                  else

                    /*
                     * Clicking the first activate button in above list, to
                     * make sure we activate the first editor.
                     */
                    p5.web.widgets.ajax-events.raise:x:/@p5.web.widgets.find/*/0?value
                      onclick

