
/*
 * Edits the specified [file], using some sort of CodeMirror editor.
 */





/*
 * Hiding any previously shown edit file toolbars.
 */
p5.web.widgets.find-first-like:hyper-ide-toolbar-wrapper
  .toolbar
  class:visible
micro.css.delete:x:/@p5.web.widgets.find-first-like/*/*?value
  class:visible
micro.css.add:x:/@p5.web.widgets.find-first-like/*/*?value
  class:hide





/*
 * Making sure we load correct editor according to file extension.
 *
 * First loading file extension to CM mode mapping file.
 * This file contains a bunch of file extensions, that are "mapped" towards
 * CodeMirror modes.
 *
 * Hence, we load the file, do a loopkup for our file extension, at which point
 * we end up with a CodeMirror mode.
 */
load-file:@IDE/configuration/extension2cm-instance.hl





/*
 * Checking if mode exists for file extension.
 *
 * First figuring our file extension of file caller wants to edit.
 */
split:x:/../*/file?value
  =:.
if:x:/@load-file/*/*/{0}
  :x:/@split/0/-?name

  /*
   * Loading file, such that we can pass its content into our editor instance.
   *
   * Making sure we do not convert the file.
   */
  load-file:x:/../*/file?value
    convert:false

  /*
   * CodeMirror mode for file's extension exists.
   *
   * Adding CodeMirror editor with correct mode to our [widgets] collection below.
   */
  eval-x:x:/+/*/*/*
  add:x:/../*/create-widgets/*/div/*/widgets/=editor
    src
      micro.widgets.codemirror
        .data-field:content
        mode:x:/@load-file/@load-file/*/*/{0}?value
          :x:/@split/0/-?name
        value:x:/@load-file/*?value
        auto-focus:true
        keys
          Alt-S:p5.$('hyper-ide-file-editor').raise('.onsave');
          Alt-X:p5.$('hyper-ide-file-editor').raise('.onclose');
          Alt-W:p5.$('hyper-ide-file-editor').raise('.onnext');
          Alt-Q:p5.$('hyper-ide-file-editor').raise('.onprevious');

else

  /*
   * No editor exists, returning early.
   */
  return





/*
 * Checking if splash screen is open, and closing it if it is.
 */
if
  fetch:x:/0/0?value
    widget-exists:hyper-ide-splash
  delete-widget:hyper-ide-splash





/*
 * Making sure our "tab control" exists.
 *
 * The "tab control" widget will "wrap" all of our editors.
 */
if
  fetch:x:/0/0?value
    widget-exists:hyper-ide-editor-tab
  not

  /*
   * Creating our "tab control" wrapper.
   */
  create-widget:hyper-ide-editor-tab
    parent:hyper-ide-file-editor
    class:hyper-ide-editor-tab
    widgets
      container:hyper-ide-editor-tab-buttons
        class:hyper-ide-editor-tab-buttons
      container:hyper-ide-editor-tab-editors
        class:hyper-ide-editor-tab-content shaded rounded





/*
 * Making sure we hide any previously created file toolbars.
 */
p5.web.widgets.find-first-like
  .toolbar
  class:visible
micro.css.delete:x:/@p5.web.widgets.find-first-like/*/*?value
  class:visible
micro.css.add:x:/@p5.web.widgets.find-first-like/*/*?value
  class:hide





/*
 * Making sure we hide any previously created editors.
 */
p5.web.widgets.find-first-like:hyper-ide-file-editor
  .editor
  class:visible
micro.css.delete:x:/@p5.web.widgets.find-first-like/*/*?value
  class:visible
micro.css.add:x:/@p5.web.widgets.find-first-like/*/*?value
  class:hide





/*
 * Notice, to prevent non-active editors' content being serialised back from
 * client upon consecutive Ajax requests, we disable all non-active editors'
 * textarea.
 *
 * This will preserve a lot of bandwidth, and hence make Hyper IDE more responsive.
 */
p5.web.widgets.find-first:x:/@p5.web.widgets.find-first-like/*/*?value
  element:textarea
set-widget-property:x:/@p5.web.widgets.find-first/*/*?value
  disabled





/*
 * "Un-toggling" existing toggled tab button.
 */
p5.web.widgets.find-first-like:hyper-ide-editor-tab-buttons
  .activate
  class:toggled
micro.css.delete:x:/@p5.web.widgets.find-first-like/*/*?value
  class:toggled





/*
 * Adding all file specific plugins.
 */
eval-x:x:/+/*/*
add:x:/../*/create-widgets/**/micro.widgets.file/*/widgets
  micro.evaluate.file:@IDE/helpers/get-plugins.hl
    type:hyper-ide.plugins.{0}
      :x:/@load-file/*/*/{0}?value
        :x:/@split/0/-?name





/*
 * Figuring out filename of file, without its folder.
 */
split:x:/../*/file?value
  =:/





/*
 * Creating our widgets.
 *
 * We create one "tab control button", then we add one editor into "tab control editors",
 * before we finally create one toolbar for saving file, etc. The latter will also contain
 * all plugins for current mode.
 */
create-widgets


  /*
   * Toolbar for saving editor's content, closing it, etc.
   */
  micro.widgets.file
    folder:@IDE/helpers/toolbars/file-editor/
    after:hyper-ide-toolbars
    class:strip right hyper-ide-toolbar visible
    .toolbar:x:/../*/file?value
    events

      /*
       * Invoked when for some reasons active file changes name.
       *
       * This event is invoked when for instance the file is renamed, etc.
       */
      hyper-ide.set-active-filename

        /*
         * Checking if this is our active editor, and if not, returning early.
         */
        get-widget-property:x:/../*/_event?value
          class
        if:x:/@get-widget-property/*/*?value
          ~:hide
          return

        /*
         * Updating [.file] attribute for widget.
         */
        set-widget-property:x:/../*/_event?value
          .toolbar:x:/../*/_arg?value

    widgets


  /*
   * Activate tab/editor button.
   */
  button
    parent:hyper-ide-editor-tab-buttons
    class:hyper-ide-activate-tab-button toggled
    .activate:x:/../*/file?value
    title:x:/../*/file?value
    events


      /*
       * Invoked when for some reasons active file changes name.
       */
      hyper-ide.set-active-filename

        /*
         * Checking if this is our active file, and if not, returning early.
         */
        get-widget-property:x:/../*/_event?value
          class
        if:x:/@get-widget-property/*/*?value
          !~:toggled
          return

        /*
         * Updating [.file] attribute for widget.
         */
        split:x:/../*/_arg?value
          =:/
        p5.web.widgets.get-children:x:/../*/_event?value
        set-widget-property:x:/-/*/0?value
          innerValue:x:/@split/0/-?name
        set-widget-property:x:/../*/_event?value
          .activate:x:/../*/_arg?value
          title:x:/../*/_arg?value

    onclick

      /*
       * Getting filename for editor.
       */
      get-widget-property:x:/../*/_event?value
        .activate

      /*
       * Activating editor, and verifying invocation was a success.
       */
      hyper-ide.editors.set-active-editor:x:/@get-widget-property/*/*?value

    widgets
      span
        innerValue:x:/@split/0/-?name

      /*
       * Close editor button.
       */
      literal
        element:span
        class:hyper-ide-close icon-cross button
        title:Close editor
        role:button
        onclick

          /*
           * Closing active editor.
           */
          p5.web.widgets.get-parent:x:/../*/_event?value
          get-widget-property:x:/-/*/*?value
            .activate
          eval-x:x:/+/*
          hyper-ide.editors.close
            filter:x:/@get-widget-property/*/*?value


  /*
   * Actual editor for file.
   *
   * Dynamically created above according to file extension.
   */
  div
    parent:hyper-ide-editor-tab-editors
    class:hyper-ide-codemirror-wrapper visible
    .editor:x:/../*/file?value
    data-editor:x:/../*/file?value
    events


      /*
       * Invoked when for some reasons active file changes name.
       */
      hyper-ide.set-active-filename

        /*
         * Checking if this is our active editor, and if not, returning early.
         */
        get-widget-property:x:/../*/_event?value
          class
        if:x:/@get-widget-property/*/*?value
          ~:hide
          return

        /*
         * Updating [.file] attribute for widget.
         */
        set-widget-property:x:/../*/_event?value
          .editor:x:/../*/_arg?value


    widgets:editor





/*
 * Raising our "file edited" event.
 */
hyper-ide.on-file-edited
