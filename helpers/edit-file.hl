
/*
 * Edits the specified [file], using some sort of CodeMirror editor, or whatever
 * is available.
 */





/*
 * Sanity checking arguments.
 */
micro.lambda.contract.min:x:/..
  file:string





/*
 * Checking if file is already open, at which point we reuse existing editor, to
 * avoid reloading file, and loosing any potential changes.
 */
p5.web.widgets.find:hyper-ide-editor-tab-buttons
  .activate:x:/../*/file?value
if:x:/@p5.web.widgets.find/*/*?value

  /*
   * File is already open, activating editor, and returning early.
   *
   * First making sure correct tab control button becomes toggled.
   * The latter is done by making sure we remove the "toggled" class from all
   * activate buttons, except the one caller is trying to activate.
   *
   * First finding all activate buttons.
   */
  p5.web.widgets.find:hyper-ide-editor-tab-buttons
    .activate

  /*
   * Then removing the one caller is trying to activate from our above invocation.
   */
  set:x:@"/@p5.web.widgets.find/*/*/""{0}"""
    :x:/../*/p5.web.widgets.find/[0,1]/*/*?value

  /*
   * Then deleting the "toggled" CSS class from all editors in above list.
   */
  micro.css.delete:x:/@p5.web.widgets.find/*/*?value
    class:toggled

  /*
   * Then adding the "toggled" class to the activate button caller is activating.
   */
  micro.css.add:x:/../*/p5.web.widgets.find/[0,1]/*/*?value
    class:toggled

  /*
   * Then making sure correct editor becomes visible.
   *
   * Notice, we'll need to make all editors' here invisible, except the one caller
   * is trying to activate. Hence, first we find editor user is trying to activate.
   */
  p5.web.widgets.find:hyper-ide-editor-tab-editors
    .editor:x:/../*/file?value

  /*
   * Then finding all editors.
   */
  p5.web.widgets.find:hyper-ide-editor-tab-editors
    .editor

  /*
   * Then removing the editor user is trying to activate from list of all editors
   * that we retrieved above.
   */
  set:x:/@p5.web.widgets.find/*/*/{0}
    :x:/@p5.web.widgets.find/@p5.web.widgets.find/*/*?value

  /*
   * Making all editors invisible, except the one caller is trying to make visible.
   */
  set-widget-property:x:/@p5.web.widgets.find/*/*?value
    visible:false

  /*
   * Then making the editor caller is trying to show become visible.
   */
  set-widget-property:x:/@p5.web.widgets.find/@p5.web.widgets.find/*/*?value
    visible:true

  /*
   * Then making sure we hide all special toolbars, except for the one caller
   * is trying to show.
   */
  p5.web.widgets.find:hyper-ide-toolbars
    .toolbar:x:/../*/file?value
  p5.web.widgets.find:hyper-ide-toolbars
    .toolbar
  set:x:/@p5.web.widgets.find/*/*/{0}
    :x:/@p5.web.widgets.find/@p5.web.widgets.find/*/*?value
  set-widget-property:x:/@p5.web.widgets.find/*/*?value
    visible:false

  /*
   * Then making sure we display the special toolbar for the editor caller wants
   * to show.
   */
  set-widget-property:x:/@p5.web.widgets.find/@p5.web.widgets.find/*/*?value
    visible:true

  /*
   * Returning early to abort evaluation of the rest of our lambda (file).
   */
  return





/*
 * Loading file, such that we can pass its content into our editor instance.
 *
 * Making sure we do not convert the file.
 */
load-file:x:/../*/file?value
  convert:false





/*
 * Retrieving file extension of file, and its filename.
 */
split:x:/../*/file?value
  =:/
split:x:/-/0/-?name
  =:.





/*
 * Retrieving editor for file type, according to file's extension, making sure we
 * pass in file's content.
 *
 * First checking if a specialised editor exists.
 */
.editor-instance
if:x:/@split/*?count
  >:int:1
  and
    fetch:x:/0/0?value
      file-exists:@IDE/helpers/editors/{0}.hl
        :x:/@split/0/-?name

  /*
   * Specialised editor exists, loading it by evaluating its file, and adding
   * the returned arguments into above [.editor-instance] lambda.
   */
  eval-x:x:/+/*/*/content
  add:x:/@.editor-instance
    micro.evaluate.file:@IDE/helpers/editors/{0}.hl
      :x:/@split/0/-?name
      content:x:/@load-file/*?value

else

  /*
   * Trying to use one of the standard CodeMirror editors.
   *
   * First loading file extension to CM mode mapping file.
   * This file contains a bunch of file extensions, that are "mapped" towards
   * CodeMirror modes.
   *
   * Hence, we load the file, do a loopkup for our file extension, at which point
   * we end up with a CodeMirror mode.
   */
  load-file:@IDE/configuration/extension2cm-instance.hl

  /*
   * Checking if specified mode exists.
   */
  if:x:/@load-file/*/*/{0}
    :x:/@split/0/-?name

    /*
     * CodeMirror mode for file's extension exists.
     */
    eval-x:x:/+/*/*/*
    add:x:/@.editor-instance
      src
        micro.widgets.codemirror
          .data-field:content
          mode:x:/@load-file/*/*/{0}?value
            :x:/@split/0/-?name
          value:x:/../*/load-file/*?value
          auto-focus:true
          .keys
            Alt-S:@"p5.$('hyper-ide-main-container').raise('.onsave');"
            Alt-X:@"p5.$('hyper-ide-main-container').raise('.onclose');"
            Alt-N:@"p5.$('hyper-ide-main-container').raise('.onnext');"
            Alt-P:@"p5.$('hyper-ide-main-container').raise('.onprevious');"

  else

    /*
     * No editor exists, returning early, warning user first
     */
    micro.windows.info:I don't know how to edit such files
      class:micro-windows-info warning
    return





/*
 * Checking if splash screen is open, and closing it if it is.
 */
if
  fetch:x:/0/0?value
    widget-exists:hyper-ide-splash
  delete-widget:hyper-ide-splash





/*
 * Making sure our "tab control" exists.
 *
 * These widgets will "wrap" all of our editors.
 */
if
  fetch:x:/0/0?value
    widget-exists:hyper-ide-editor-tab
  not

  /*
   * Creating our "tab control" wrapper.
   */
  create-widget:hyper-ide-editor-tab
    parent:hyper-ide-file-editor
    class:hyper-ide-editor-tab
    widgets
      container:hyper-ide-editor-tab-buttons
        class:hyper-ide-editor-tab-buttons
      container:hyper-ide-editor-tab-editors
        class:hyper-ide-editor-tab-content shaded rounded





/*
 * Making sure we hide any previously created file toolbars.
 *
 * This is the toolbar that contains "Save" button, "Close" button, and plugin
 * buttons, etc.
 */
p5.web.widgets.find:hyper-ide-toolbars
  .toolbar
set-widget-property:x:/-/*/*?value
  visible:false





/*
 * Making sure we hide any previously created editors.
 */
p5.web.widgets.find:hyper-ide-file-editor
  .editor
set-widget-property:x:/-/*/*?value
  visible:false





/*
 * Adding actual editor to [create-widgets] invocation below.
 */
add:x:/../*/create-widgets/*/div/*/widgets/=editor
  src:x:/@.editor-instance/*





/*
 * "Un-toggling" all previously created tab buttons.
 */
p5.web.widgets.find:hyper-ide-editor-tab-buttons
  .activate
micro.css.delete:x:/-/*/*?value
  class:toggled





/*
 * Retrieving active events that will create a plugin button for our current CM mode.
 */
vocabulary:~hyper-ide.plugins.{0}.
  :x:/@.editor-instance/*/*/mode?value





/*
 * Adding all plugin active events for current mode into [.plugins] below.
 */
.plugins
  return:x:/../*/*
for-each:x:/@vocabulary/*?value
  insert-before:x:/@.plugins/0/-
    src:x:/@_dp?value





/*
 * Evaluating [.plugins] lambda, which will invoke all plugin button events for us,
 * and return its result.
 */
eval:x:/@.plugins





/*
 * Adding the results of above plugin creation logic into our toolbar widget.
 *
 * Notice, the above [eval] will return the results of all plugin active events.
 */
insert-after:x:/../*/create-widgets/*/div/[0,1]/*/widgets/0
  src:x:/@eval/*





/*
 * Creating our widgets.
 *
 * We create one "tab control button", then we add one editor into "tab control editors",
 * before we finally create one toolbar for saving file, etc. The latter will also contain
 * all plugins for current mode.
 */
create-widgets

  /*
   * Toolbar for saving editor's content, closing it, etc.
   */
  div
    after:hyper-ide-active-file-object-toolbar
    class:strip hyper-ide-toolbar
    style:"display:inline-block;"
    .toolbar:x:/../*/file?value
    widgets

      /*
       * Save button.
       */
      button
        style:"padding-left:35px;padding-right:35px;margin-bottom:0;"
        innerValue:@"<span class=""icon-floppy-disk""></span>"
        title:Saves your file, keyboard shortcut Alt+S
        onclick

          /*
           * Invoking event responsible for saving file.
           */
          hyper-ide.save-active-editor

      /*
       * Toggling visibility of "solution explorer".
       */
      button
        innerValue:@"<span class=""icon-tree""></span>"
        title:Toggle visibility of solution explorer
        style:"margin-bottom:0;"
        oninit

          /*
           * Checking of "solution explorer" is visible, and if it is, making
           * sure button is initially created with the "toggled" class.
           */
          get-widget-property:hyper-ide-file-browser-wrapper
            class
          if:x:/@get-widget-property/*/*/=~hide
            not

            /*
             * Solution explorer is visible.
             *
             * Hence, we make sure our "toggle solution explorer" button becomes toggled.
             */
            micro.css.add:x:/../*/_event?value
              class:toggled

        onclick

          /*
           * Toggling "hide" class for solution explorer, and "toggled" class
           * for the currently clicked button.
           *
           * In addition, we toggle "col-70" and "col" for our editor wrapper.
           */
          micro.css.toggle:hyper-ide-file-browser-wrapper
            class:hide
          micro.css.toggle:x:/../*/_event?value
            class:toggled
          micro.css.toggle:hyper-ide-file-editor
            class:col-70 col

      /*
       * Close editor button.
       */
      button
        innerValue:@"<span class=""icon-cross""></span>"
        style:"margin-bottom:0;"
        title:Close editor, keyboard shortcut Alt+X
        onclick

          /*
           * Closing active editor
           */
          hyper-ide.close-active-editor

  /*
   * Activate tab/editor button.
   */
  button
    parent:hyper-ide-editor-tab-buttons
    class:hyper-ide-activate-tab-button toggled
    .activate:x:/../*/file?value
    innerValue:x:/../*/split/[0,1]/0/-?name
    title:x:/../*/split/[0,1]/0/-?name
    onclick

      /*
       * Getting filename for editor.
       */
      get-widget-property:x:/../*/_event?value
        .activate

      /*
       * Activating editor, and verifying invocation was a success.
       */
      hyper-ide.set-active-editor:x:/@get-widget-property/*/*?value
      if:x:/-?value

        /*
         * Making sure we scroll tree view item into view.
         */
        p5.web.widgets.find-first-like:hyper-ide-folder-tree-browser
          class:tree-selected
        p5.web.send-javascript:@"p5.$('{0}').el.scrollIntoView();"
          :x:/@p5.web.widgets.find-first-like/*/*?value

  /*
   * Actual editor for file.
   *
   * Dynamically created above according to file extension.
   */
  div
    parent:hyper-ide-editor-tab-editors
    class:hyper-ide-codemirror-wrapper
    .editor:x:/../*/file?value
    widgets:editor
