/*
 * Template for a new _"Hello World module"_.
 *
 * This file creates a simple _"Hello World"_ type of application.
 * The file requires a __[name]__ argument as the name of new module to create.
 *
 * This file is used by the __[hyper-ide.folder-plugin.create-module]__
 * plugin when the user creates a new module by following a wizard.
 */





/*
 * Sanity checking arguments.
 */
micro.lambda.contract.min:x:/..
  name:string





/*
 * Creates our new module.
 *
 * First making sure our main module folder exists.
 */
create-folder:/modules/{0}/
  :x:/../*/name?value





/*
 * Then creating our module's files, first the "launch.hl" file.
 */
save-file:/modules/{0}/launch.hl
  :x:/../*/name?value
  src:@"
/*
 * Includes CSS for our module.
 */
micro.css.include


/*
 * Creating main wire frame for module.
 */
create-widget
  class:container
  widgets
    div
      class:row
      widgets
        div
          class:col-100
          widgets
            div
              class:right strip toolbar
              widgets
                button
                  innerValue:@""<span class=""""icon-home3""""></span>""
                  onclick

                    /*
                     * Redirecting user to server's root URL.
                     */
                    p5.web.get-root-location
                    p5.web.set-location:x:/-?value

        div
          class:col-100
          widgets
            div
              class:air-inner shaded rounded bg
              widgets
                h3
                  innerValue:Hello World
                p
                  innerValue:@""Here is a template for your convenience, creating a default startup module wire frame for you.
It contains 4 files.""
                ul
                  widgets
                    li
                      innerValue:<code>'launch.hl'</code> - This is the file that is evaluated when your module is launched
                    li
                      innerValue:<code>'desktop.hl'</code> - This creates a 'desktop icon' for your module
                    li
                      innerValue:<code>'startup.hl'</code> - Evaluated when the server is started
                    li
                      innerValue:<code>'install.hl'</code> - Evaluated when your module is installed
                    li
                      innerValue:<code>'uninstall.hl'</code> - Evaluated when your module is uninstalled
                button:foo-button
                  innerValue:Click me!
                  onclick
                    set-widget-property:foo-button
                      innerValue:Hello World
"





/*
 * Then creating our "desktop.hl" file.
 */
save-file:/modules/{0}/desktop.hl
  :x:/../*/name?value
  src:@"
/*
 * Desktop widget.
 *
 * This becomes your module's 'desktop icon'.
 */
container
  element:a
  class:jumbo-button
  title:This module says Hello World!
  widgets
    span
      innerValue:Hello
    literal
      element:span
      class:icon-happy
"





/*
 * Then creating our "startup.hl" file.
 */
to-upper:x:/../*/name?value
save-file:/modules/{0}/startup.hl
  :x:/../*/name?value
  src:@"
/*
 * Provide whatever startup logic your module requires here, if any.
 *
 * For instance, create Active Events necessary to wire up your module.
 * Below is an example of creating a 'path' event for instance, which unrolls
 * the path declaration of @YOUR-APP-NAME to your module's main folder.
 */
split:x:/..?name
  =:/
set:x:/@split/0/-
join:x:/@split/*?name
  sep:/
eval-x:x:/+/*
create-event:p5.io.unroll-path.@{0}
  return:/{{0}}
    :x:/@join?value
"
    :x:/@to-upper?value





/*
 * Then creating our "uninstall.hl" file.
 */
save-file:/modules/{0}/install.hl
  :x:/../*/name?value
  src:@"
/*
 * Provide whatever installation logic your module requires here, if any.
 *
 * Common tasks for this file, is to create your database (if any), etc.
 * This file is empty, since this particular example currently doesn't have 
 * any installation logic.
 */
.foo
"





/*
 * Then creating our "uninstall.hl" file.
 */
save-file:/modules/{0}/uninstall.hl
  :x:/../*/name?value
  src:@"
/*
 * Provide whatever uninstall logic your module requires here, if any.
 *
 * Common tasks for this file, is to delete all Active Events created by
 * your module, such as the following example illustrates.
 */
delete-event:p5.io.unroll-path.@{0}
"
    :x:/@to-upper?value
