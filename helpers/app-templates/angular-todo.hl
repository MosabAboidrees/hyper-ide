/*
 * Template for "new Angular module plugin" button.
 *
 * Creates a simple "TODO" AngularJS application.
 * Requires [name] as name of new module to create.
 */





/*
 * Sanity checking arguments.
 */
micro.lambda.contract.min:x:/..
  name:string





/*
 * Creates our new module.
 *
 * First making sure our main module folder exists.
 */
create-folder:/modules/{0}/
  :x:/../*/name?value





/*
 * We'll need the module name in UPPERCASE later down the road.
 */
to-upper:x:/../*/name?value





/*
 * Creating our "desktop.hl" file.
 */
save-file:/modules/{0}/desktop.hl
  :x:/../*/name?value
  src:@"
/*
 * Desktop widget.
 *
 * This becomes your module's 'desktop icon'.
 */
container
  element:a
  class:desktop-app shaded rounded air-inner
  title:A simple AngularJS TODO app
  widgets
    span
      class:desktop-app-name
      widgets
        literal
          element:span
          class:icon-flash desktop-app-icon
        span
          class:desktop-app-text
          innerValue:TODO
"





/*
 * Then creating our "startup.hl" file.
 */
to-upper:x:/../*/name?value
save-file:/modules/{0}/startup.hl
  :x:/../*/name?value
  src:@"
/*
 * Provide whatever startup logic your module requires here, if any.
 *
 * For instance, create Active Events necessary to wire up your module.
 * Below is an example of creating a 'path' event for instance, which unrolls
 * the path declaration of @YOUR-APP-NAME to your module's main folder.
 */
split:x:/..?name
  =:/
set:x:/@split/0/-
join:x:/@split/*?name
  sep:/
eval-x:x:/+/*
create-event:p5.io.unroll-path.@{0}
  return:/{{0}}
    :x:/@join?value
"
    :x:/@to-upper?value





/*
 * Then creating our "install.hl" file.
 */
save-file:/modules/{0}/install.hl
  :x:/../*/name?value
  src:@"


/*
 * Creates our database.
 *
 * Notice, if the schema exists from before, this will throw an exception,
 * which we simply silently catch.
 */
try
  p5.config.get:p5.data.prefix
  p5.mysql.connect:[sys]
    p5.mysql.execute:create schema `{{0}}{0}`
      :x:/@p5.config.get/*?value
  p5.mysql.connect:[{0}]
    p5.mysql.execute:@""
create table if not exists `items` (
  `id` int(10) unsigned not null auto_increment,
  `description` varchar(1024) collate utf8mb4_unicode_ci not null,
  primary key (`id`)
) engine=InnoDB auto_increment=0 default charset=utf8mb4 collate=utf8mb4_unicode_ci;""
catch

  /*
   * Database exists from before.
   */
"
    :x:/../*/name?value





/*
 * Then creating our "uninstall.hl" file.
 */
save-file:/modules/{0}/uninstall.hl
  :x:/../*/name?value
  src:@"
/*
 * Provide whatever uninstall logic your module requires here, if any.
 *
 * Common tasks for this file, is to delete all Active Events created by
 * your module, such as the following example illustrates.
 */
delete-event:p5.io.unroll-path.@{0}
"
    :x:/@to-upper?value





/*
 * Then creating our "launch.hl" file.
 */
save-file:/modules/{0}/launch.hl
  :x:/../*/name?value
  src:@"
p5.web.echo-file:@{0}/index.html
"
    :x:/@to-upper?value





/*
 * Then creating our "index.html" file.
 */
save-file:/modules/{0}/index.html
  :x:/../*/name?value
  src:@"
<!doctype html>
<html ng-app='todoApp'>
  <head>
    <script src='https://ajax.googleapis.com/ajax/libs/angularjs/1.6.6/angular.min.js'></script>
    <script src='/modules/{0}/controller.js'></script>
    <link rel='stylesheet' type='text/css' href='/modules/micro/media/micro.css' />
    <link rel='stylesheet' type='text/css' href='/modules/micro/media/skins/serious.css' />
    <link rel='stylesheet' type='text/css' href='/modules/{0}/styles.css' />
  </head>
  <body>
    <div class='container'>
      <div class='row'>
        <div class='col'>
          <div ng-controller='TodoListController as todoList' class='shaded air-inner bg rounded'>
            <h1>Todo</h1>
            <form ng-submit='todoList.addTodo()'>
              <div class='new-item strip'>
                <input type='text' autocomplete='off' ng-model='todoList.todoText' placeholder='Add item ...' id='newItem'>
                <input type='submit' class='submit-button' value='add'>
              </div>
            </form>
            <div>
              <ul class='todos'>
                <li ng-repeat='todo in todoList.todos' ng-click='todoList.delete(todo.id)'>{{{{todo.description}}}}</li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>
"
    :x:/../*/name?value





/*
 * Then creating our "controller.js" file.
 */
save-file:/modules/{0}/controller.js
  :x:/../*/name?value
  src:@"

/*
 * Main module for our Angular app.
 */
angular.module ('todoApp', [])

  /*
   * Our only controller, responsible for invoking our server side back end,
   * and databinding our view.
   */
  .controller ('TodoListController', function ($scope, $http) {{

    /*
     * Fetching existing items from our server.
     */
    var todoList = this;
    $http.get ('/hyper-core/mysql/{0}/items/select').
      then (function successCallback (response) {{
        todoList.todos = response.data;
    }});
 
    /*
     * Invoked by our view when a new item has been added by user.
     * Updates our view with the item, and invokes server-side back end,
     * by issuing an 'insert' command towards our REST ORM.
     */
    todoList.addTodo = function () {{

      /*
       * Invoking our server-side method, to insert item into our database.
       *
       * Notice, server-side back end requires a 'PUT' request.
       */
      $http ({{
        method:'PUT', 
        url: '/hyper-core/mysql/{0}/items/insert', 

        /*
         * Our server-side requires the data for our insert operation to be URL encoded,
         * hence we'll need to transform from the default serialization logic of Angular,
         * which is JSON, to URL encoded data.
         */
        headers: {{'Content-Type': 'application/x-www-form-urlencoded'}},
        transformRequest: function (obj) {{
          var str = [];
          for (var p in obj) {{
            str.push (encodeURIComponent (p) + '=' + encodeURIComponent (obj [p]));
          }}
          return str.join ('&');
        }},
        data: {{description: document.getElementById ('newItem').value}}
      }}).then (function successCallback (response) {{

        /*
         * Pushing our new item into our list of items, and making sure
         * we set our textbox' value to empty.
         */
        todoList.todos.push ({{
          description: todoList.todoText, 
          id:response.data.id
        }});
        todoList.todoText = '';
      }});
    }};
 
    /*
     * Invoked by our view when an item is deleted.
     */
    todoList.delete = function (id) {{

      /*
       * Deleting our clicked item from our list of items from our view.
       */
      for(var idx = 0; idx < todoList.todos.length; idx++) {{
        if (todoList.todos [idx].id === id) {{
          todoList.todos.splice (idx,1);
          break;
        }}
      }}

      /*
       * Invoking our server-side method, to delete the item from our database.
       *
       * Notice, server-side back end requires a 'DELETE' request.
       */
      $http.delete('/hyper-core/mysql/{0}/items/delete?id=' + id);
    }}
  }});
"
    :x:/../*/name?value





/*
 * Then creating our "styles.css" file.
 */
save-file:/modules/{0}/styles.css
  :x:/../*/name?value
  src:@"

.bg {
  position:relative;
}

.new-item {
  position:absolute;
  bottom:0;
  right:1rem;
}

.submit-button {
  width:auto;
}

ul.todos {
  list-style:none;
  margin-left:0;
  margin-bottom:3rem;
}

ul.todos>li {
  font-size:1.5rem;
  margin-bottom:.5rem;
  cursor:no-drop;
}
"
