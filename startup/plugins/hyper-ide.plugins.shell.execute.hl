/*
 * Create our execute shell command plugin button for editor.
 */
create-event:hyper-ide.plugins.shell.execute
  return
    button
      innerValue:@"<span class=""icon-terminal""></span>"
      style:"margin-bottom:0;"
      title:Execute script
      onclick

        /*
         * Retrieves editor's content.
         */
        hyper-ide.editors.get-active-code

        /*
         * Creates a temporary file, containing the current code from the active 
         * editor, which is the file we actually execute.
         * This is done since the file might not necessarily be saved, and we 
         * assume user wants to execute the code from his editor, and not 
         * necessarily the code from his physical file.
         *
         * However, first checking platform, since we might need to convert
         * from CR/LF to only LF, in case we're on MacOSX
         */
        p5.system.platform
        if:x:/@p5.system.platform?value
          =:Unix
          or:x:/@p5.system.platform?value
            =:MacOSX

          /*
           * Replacing CR/LF before we save file.
           */
          p5.system.platform.normalize-string:x:/@hyper-ide.editors.get-active-code?value
          save-file:~/temp/temp-bash.sh
            src:x:/@p5.system.platform.normalize-string?value

        else

          /*
           * Saving file with CR/LF as new line characters.
           */
          save-file:~/temp/temp-bash.sh
            src:x:/@hyper-ide.editors.get-active-code?value

        /*
         * Then making sure we wrap our execution inside of a try/catch block,
         * such that we can be certain of that our temporary file is always deleted,
         * since it might contain passwords and such, while we track the result
         * from our execution.
         */
        .result
        .class
        try

          /*
           * Figuring out "working folder", which is the folder where the original
           * file can be found.
           */
          hyper-ide.editors.get-active
          split:x:/@hyper-ide.editors.get-active?value
            =:/
          set:x:/@split/0/-
          join:x:/@split/*?name
            sep:/
          trim-left:x:/@join?value
            chars:/

          /*
           * Executing temp file, with working folder being folder where original
           * file is physically located.
           */
          p5.system.platform.execute-file:~/temp/temp-bash.sh
            working-folder:/{0}
              :x:/@trim-left?value

          /*
           * Setting result to result of invocation above.
           */
          set:x:/@.result?value
            src:x:/@p5.system.platform.execute-file/*?value
          set:x:/@.class?value
            src:success

        catch

          /*
           * Setting result to exception message.
           */
          set:x:/@.result?value
            src:x:/@message?value
          set:x:/@.class?value
            src:warning

        finally

          /*
           * Deleting temp file.
           */
          delete-file:~/temp/temp-bash.sh

        /*
         * Opens a modal window, displaying the results of our execution, making
         * sure we HTML encode any result.
         */
        p5.html.html-encode:x:/@.result?value
        eval-x:x:/+/*/*/*/div/*/innerHtml|/+/**/pre/*/class
        create-widgets
          micro.widgets.modal:hyper-ide-execute-output
            widgets
              h3
                innerValue:Result
              pre
                innerValue:x:/@p5.html.html-encode?value
                style:"font-size:.7rem;"
                class:air-top {0}
                  :x:/@.class?value
              div
                class:right
                widgets
                  div
                    class:strip
                    style:"display:inline-block;"
                    widgets
                      button
                        innerValue:Close
                        style:"margin-bottom:0;"
                        oninit

                          /*
                           * Making sure we set initial focus to "Close" button.
                           */
                          micro.page.set-focus:x:/../*/_event?value

                        onclick

                          /*
                           * Deleting modal widget.
                           */
                          delete-widget:hyper-ide-execute-output
